import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function testFolderFeature() {
    try {
        console.log('üß™ Testando funcionalidade da coluna FOLDER...');

        // 1. Verificar se a coluna existe
        console.log('\n1Ô∏è‚É£ Verificando se a coluna FOLDER existe...');
        const tableInfo = await prisma.$queryRaw`
      SELECT column_name, data_type, is_nullable 
      FROM information_schema.columns 
      WHERE table_name = 'Track' AND column_name = 'folder'
    `;

        if (tableInfo.length === 0) {
            console.log('‚ùå Coluna FOLDER n√£o encontrada. Execute a migra√ß√£o primeiro.');
            return;
        }

        console.log('‚úÖ Coluna FOLDER encontrada:', tableInfo[0]);

        // 2. Testar inser√ß√£o com folder
        console.log('\n2Ô∏è‚É£ Testando inser√ß√£o com campo FOLDER...');

        const testTrack = await prisma.track.create({
            data: {
                songName: 'Test Track with Folder',
                artist: 'Test Artist',
                style: 'Test Style',
                previewUrl: 'https://test.com/preview.mp3',
                downloadUrl: 'https://test.com/download.mp3',
                releaseDate: new Date(),
                folder: 'Test Album 2024'
            }
        });

        console.log('‚úÖ Track criada com sucesso:', {
            id: testTrack.id,
            songName: testTrack.songName,
            folder: testTrack.folder
        });

        // 3. Testar consulta por folder
        console.log('\n3Ô∏è‚É£ Testando consulta por FOLDER...');

        const tracksByFolder = await prisma.track.findMany({
            where: {
                folder: 'Test Album 2024'
            },
            select: {
                id: true,
                songName: true,
                artist: true,
                folder: true
            }
        });

        console.log('‚úÖ Tracks encontradas por folder:', tracksByFolder);

        // 4. Testar consulta com folder nulo
        console.log('\n4Ô∏è‚É£ Testando consulta com FOLDER nulo...');

        const tracksWithoutFolder = await prisma.track.findMany({
            where: {
                folder: null
            },
            select: {
                id: true,
                songName: true,
                artist: true,
                folder: true
            },
            take: 5
        });

        console.log('‚úÖ Tracks sem folder (primeiras 5):', tracksWithoutFolder);

        // 5. Testar atualiza√ß√£o de folder
        console.log('\n5Ô∏è‚É£ Testando atualiza√ß√£o de FOLDER...');

        const updatedTrack = await prisma.track.update({
            where: { id: testTrack.id },
            data: { folder: 'Updated Album Name' }
        });

        console.log('‚úÖ Track atualizada:', {
            id: updatedTrack.id,
            songName: updatedTrack.songName,
            folder: updatedTrack.folder
        });

        // 6. Limpar dados de teste
        console.log('\n6Ô∏è‚É£ Limpando dados de teste...');

        await prisma.track.delete({
            where: { id: testTrack.id }
        });

        console.log('‚úÖ Dados de teste removidos');

        console.log('\nüéâ Todos os testes passaram com sucesso!');
        console.log('‚úÖ A coluna FOLDER est√° funcionando perfeitamente');

    } catch (error) {
        console.error('‚ùå Erro durante os testes:', error);
        throw error;
    } finally {
        await prisma.$disconnect();
    }
}

// Executar os testes
testFolderFeature()
    .then(() => {
        console.log('‚úÖ Testes conclu√≠dos com sucesso');
        process.exit(0);
    })
    .catch((error) => {
        console.error('‚ùå Falha nos testes:', error);
        process.exit(1);
    });
