"use client";

import React, { useEffect, useRef } from 'react';
import { useGlobalPlayer } from '@/context/GlobalPlayerContext';

/**
 * Componente espec√≠fico para dispositivos m√≥veis que ajuda com:
 * - Detec√ß√£o de intera√ß√£o do usu√°rio
 * - Configura√ß√µes espec√≠ficas para iOS/Android
 * - Tratamento de autoplay policies
 */
export const MobileAudioHandler: React.FC = () => {
    const { audioRef } = useGlobalPlayer();
    const hasUserInteracted = useRef(false);
    const isMobile = useRef(false);

    useEffect(() => {
        // Detectar se √© dispositivo m√≥vel (apenas no cliente)
        if (typeof window === 'undefined' || typeof navigator === 'undefined') {
            isMobile.current = false;
            return;
        }
        isMobile.current = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);

        if (!isMobile.current) return;

        console.log('üéµ MobileAudioHandler: Dispositivo m√≥vel detectado');

        // Fun√ß√£o para marcar que o usu√°rio interagiu
        const markUserInteraction = () => {
            if (!hasUserInteracted.current) {
                hasUserInteracted.current = true;
                console.log('üéµ MobileAudioHandler: Usu√°rio interagiu - √°udio liberado');

                // Configurar √°udio para mobile
                if (audioRef.current) {
                    const audio = audioRef.current;

                    // Configura√ß√µes espec√≠ficas para mobile
                    audio.volume = 1.0;
                    audio.muted = false;

                    // Para iOS, garantir reprodu√ß√£o inline
                    if (typeof navigator !== 'undefined' && /iPhone|iPad|iPod/i.test(navigator.userAgent)) {
                        console.log('üéµ MobileAudioHandler: Configurando iOS para reprodu√ß√£o inline');
                        // O atributo playsInline j√° est√° definido no elemento audio
                    }

                    // Para Android, garantir que o √°udio seja carregado
                    if (typeof navigator !== 'undefined' && /Android/i.test(navigator.userAgent)) {
                        console.log('üéµ MobileAudioHandler: Configurando Android');
                        // Android geralmente tem menos restri√ß√µes
                    }
                }
            }
        };

        // Eventos que indicam intera√ß√£o do usu√°rio
        const interactionEvents = [
            'touchstart',
            'touchend',
            'click',
            'keydown',
            'scroll'
        ];

        // Adicionar listeners para detectar intera√ß√£o
        interactionEvents.forEach(event => {
            document.addEventListener(event, markUserInteraction, {
                once: true,
                passive: true
            });
        });

        // Cleanup
        return () => {
            interactionEvents.forEach(event => {
                document.removeEventListener(event, markUserInteraction);
            });
        };
    }, [audioRef]);

    // Este componente n√£o renderiza nada vis√≠vel
    return null;
};
