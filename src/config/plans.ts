// Configura√ß√£o centralizada dos planos e pre√ßos da plataforma de m√∫sica
// Arquivo de configura√ß√£o √∫nica para manter consist√™ncia em toda a aplica√ß√£o

export type PlanType = 'BASICO' | 'PADRAO' | 'COMPLETO';
export type UploaderPlanType = 'BASIC' | 'PRO' | 'ELITE';
export type PeriodType = 'MONTHLY' | 'QUARTERLY' | 'SEMIANNUAL' | 'ANNUAL';

// ========== BENEF√çCIOS DOS PLANOS ==========
export const VIP_BENEFITS = {
    BASICO: {
        dailyDownloads: { enabled: true, limit: 50, description: '50 m√∫sicas/dia' },
        driveAccess: { enabled: false, description: 'N√£o dispon√≠vel' },
        packRequests: { enabled: false, description: 'N√£o dispon√≠vel' },
        individualContent: { enabled: true, description: 'Sim' },
        extraPacks: { enabled: false, description: 'N√£o dispon√≠vel' },
        playlistDownloads: { enabled: true, limit: 2, description: '2 por dia' },
        deezerPremium: { enabled: false, description: 'R$ 9,75/m√™s' },
        deemixAccess: { enabled: false, description: 'Avulso R$ 35,00/m√™s' },
        arlPremium: { enabled: false, description: 'N√£o dispon√≠vel' },
        musicProduction: { enabled: false, description: 'N√£o dispon√≠vel' }
    },
    PADRAO: {
        dailyDownloads: { enabled: true, limit: 100, description: '100 m√∫sicas/dia' },
        driveAccess: { enabled: true, description: 'Sim' },
        packRequests: { enabled: true, description: 'Sim' },
        individualContent: { enabled: true, description: 'Sim' },
        extraPacks: { enabled: true, description: 'Sim' },
        playlistDownloads: { enabled: true, limit: 5, description: '5 por dia' },
        deezerPremium: { enabled: false, description: 'R$ 9,75/m√™s' },
        deemixAccess: { enabled: false, description: 'Avulso R$ 35,00/m√™s' },
        arlPremium: { enabled: false, description: 'N√£o dispon√≠vel' },
        musicProduction: { enabled: false, description: 'N√£o dispon√≠vel' }
    },
    COMPLETO: {
        dailyDownloads: { enabled: true, limit: -1, description: 'Ilimitado' },
        driveAccess: { enabled: true, description: 'Sim' },
        packRequests: { enabled: true, description: 'Sim' },
        individualContent: { enabled: true, description: 'Sim' },
        extraPacks: { enabled: true, description: 'Sim' },
        playlistDownloads: { enabled: true, limit: -1, description: 'Ilimitado (m√°x. 4 por dia)' },
        deezerPremium: { enabled: true, description: 'Inclu√≠do' },
        deemixAccess: { enabled: false, description: 'Avulso R$ 35,00/m√™s' },
        arlPremium: { enabled: true, description: 'Sim (autom√°tico se Deemix)' },
        musicProduction: { enabled: true, description: 'Sim' }
    }
} as const;

// ========== DEFINI√á√ïES DOS PLANOS VIP ==========
export const VIP_PLANS = {
    BASICO: {
        name: 'VIP B√ÅSICO',
        basePrice: 38,
        minValue: 38,
        maxValue: 41.99,
        color: 'bg-blue-600',
        gradient: 'from-blue-600 to-blue-700',
        icon: 'ü•â',
        benefits: VIP_BENEFITS.BASICO
    },
    PADRAO: {
        name: 'VIP PADR√ÉO',
        basePrice: 42,
        minValue: 42,
        maxValue: 59.99,
        color: 'bg-green-600',
        gradient: 'from-green-600 to-green-700',
        icon: 'ü•à',
        benefits: VIP_BENEFITS.PADRAO
    },
    COMPLETO: {
        name: 'VIP COMPLETO',
        basePrice: 60,
        minValue: 60,
        maxValue: 999,
        color: 'bg-purple-600',
        gradient: 'from-purple-600 to-purple-700',
        icon: 'ü•á',
        benefits: VIP_BENEFITS.COMPLETO
    }
} as const;

// ========== PLANOS UPLOADER ==========
export const UPLOADER_PLANS = {
    BASIC: {
        name: 'UPLOADER B√ÅSICO',
        basePrice: 15,
        color: 'bg-orange-500',
        gradient: 'from-orange-500 to-orange-600',
        icon: 'üì§'
    },
    PRO: {
        name: 'UPLOADER PRO',
        basePrice: 25,
        color: 'bg-orange-600',
        gradient: 'from-orange-600 to-orange-700',
        icon: 'üöÄ'
    },
    ELITE: {
        name: 'UPLOADER ELITE',
        basePrice: 35,
        color: 'bg-orange-700',
        gradient: 'from-orange-700 to-orange-800',
        icon: 'üèÜ'
    }
} as const;

// ========== PER√çODOS DE ASSINATURA ==========
export const SUBSCRIPTION_PERIODS = {
    MONTHLY: {
        name: 'Mensal',
        months: 1,
        discount: 0,
        deemixDiscount: 0,
        deemixFree: false
    },
    QUARTERLY: {
        name: 'Trimestral',
        months: 3,
        discount: 0.05, // 5% desconto no plano
        deemixDiscount: 0.08, // 8% desconto no Deemix
        deemixFree: false
    },
    SEMIANNUAL: {
        name: 'Semestral',
        months: 6,
        discount: 0.15, // 15% desconto no plano
        deemixDiscount: 0.50, // 50% desconto no Deemix
        deemixFree: false
    },
    ANNUAL: {
        name: 'Anual',
        months: 12,
        discount: 0.15, // 15% desconto no plano
        deemixDiscount: 0,
        deemixFree: true // Deemix gr√°tis
    }
} as const;

// ========== PRE√áOS DO DEEMIX ==========
export const DEEMIX_PRICING = {
    STANDALONE: 38, // Pre√ßo avulso para n√£o-VIP (R$ 38,00)
    BASICO: {
        basePrice: 38,
        deemixPrice: 38,
        discount: 0.38, // 38% de desconto
        finalPrice: 38 - (38 * 0.38) // R$ 23,56
    },
    PADRAO: {
        basePrice: 42,
        deemixPrice: 38,
        discount: 0.42, // 42% de desconto (proporcional ao valor)
        finalPrice: 38 - (38 * 0.42) // R$ 22,04
    },
    COMPLETO: {
        basePrice: 60,
        deemixPrice: 38,
        discount: 0.60, // 60% de desconto (proporcional ao valor)
        finalPrice: 38 - (38 * 0.60) // R$ 15,20
    }
} as const;

// ========== PRE√áOS DO DEEZER PREMIUM ==========
export const DEEZER_PREMIUM_PRICING = {
    STANDALONE: 9.75, // Pre√ßo avulso mensal
    INCLUDED_WITH_DEEMIX: 0 // Gr√°tis quando Deemix est√° inclu√≠do
} as const;

// ========== OP√á√ÉO UPLOADER ==========
export const UPLOADER_OPTION = {
    name: 'UPLOADER',
    description: 'Op√ß√£o adicional para fazer upload de m√∫sicas',
    monthlyPrice: 10.00, // R$ 10,00 a mais por m√™s
    features: [
        'Upload de at√© 10 m√∫sicas por m√™s',
        'Badge de Uploader',
        'Acesso √† comunidade de uploaders'
    ]
} as const;

// ========== LABELS DOS BENEF√çCIOS ==========
export const BENEFIT_LABELS = {
    dailyDownloads: 'üéµ Downloads Di√°rios (tracks)',
    driveAccess: 'üìÅ Acesso ao Drive Mensal',
    packRequests: 'üéöÔ∏è Solicita√ß√£o de Packs',
    individualContent: 'üì¶ Conte√∫dos Avulsos',
    extraPacks: 'üî• Packs Extras',
    playlistDownloads: 'üéµ Solicita√ß√£o de Playlists',
    deezerPremium: 'üéÅ Deezer Premium Gr√°tis',
    deemixAccess: 'Acesso Deemix',
    arlPremium: 'üîê ARL Premium para Deemix',
    musicProduction: 'üéº Produ√ß√£o da sua M√∫sica'
} as const;

// ========== FUN√á√ïES UTILIT√ÅRIAS ==========

/**
 * Calcula pre√ßo real baseado no plano + add-ons
 */
export const calculateUserRealPrice = (basePrice: number, hasDeemix: boolean, hasDeezerPremium: boolean): number => {
    let totalPrice = basePrice;

    // Se n√£o √© VIP, n√£o pode ter add-ons
    if (basePrice < 35) {
        return basePrice;
    }

    // Determinar plano VIP baseado no pre√ßo base
    let planKey: keyof typeof DEEMIX_PRICING = 'BASICO';
    if (basePrice >= 50) {
        planKey = 'COMPLETO';
    } else if (basePrice >= 42) {
        planKey = 'PADRAO';
    }

    // Adicionar Deemix se ativo
    if (hasDeemix && planKey in DEEMIX_PRICING) {
        const deemixPricing = DEEMIX_PRICING[planKey];
        if (typeof deemixPricing === 'object' && 'finalPrice' in deemixPricing) {
            totalPrice += deemixPricing.finalPrice;
        }
    }

    // Adicionar Deezer Premium se ativo (e se n√£o j√° inclu√≠do no plano)
    if (hasDeezerPremium) {
        // VIP Completo j√° inclui Deezer Premium gr√°tis
        if (planKey !== 'COMPLETO') {
            // Se tem Deemix, Deezer Premium √© gr√°tis, sen√£o paga
            if (!hasDeemix) {
                totalPrice += DEEZER_PREMIUM_PRICING.STANDALONE;
            }
        }
    }

    return Math.round(totalPrice * 100) / 100; // Arredondar para 2 casas decimais
};

/**
 * Obt√©m pre√ßo base a partir do pre√ßo total (c√°lculo reverso)
 */
export const getBasePriceFromTotal = (totalPrice: number, hasDeemix: boolean, hasDeezerPremium: boolean): number => {
    // Se √© valor baixo, provavelmente √© s√≥ o plano base
    if (totalPrice < 35) {
        return totalPrice;
    }

    // Tentar diferentes planos base para ver qual bate
    const basePrices = [35, 42, 50]; // BASICO, PADRAO, COMPLETO

    for (const basePrice of basePrices) {
        const calculatedTotal = calculateUserRealPrice(basePrice, hasDeemix, hasDeezerPremium);
        if (Math.abs(calculatedTotal - totalPrice) < 0.01) {
            return basePrice;
        }
    }

    // Se n√£o encontrou correspond√™ncia exata, retornar o valor total mesmo
    return totalPrice;
};

/**
 * Determina o plano do usu√°rio baseado no valor mensal
 */
export const getUserPlan = (valor: number | null, hasDeemix?: boolean, hasDeezerPremium?: boolean) => {
    if (!valor || valor < 35) {
        return null;
    }

    // Se temos informa√ß√µes sobre add-ons, calcular o pre√ßo base
    const basePrice = (hasDeemix !== undefined && hasDeezerPremium !== undefined)
        ? getBasePriceFromTotal(valor, hasDeemix, hasDeezerPremium)
        : valor;

    // VIP Plans baseados no pre√ßo BASE
    if (basePrice >= VIP_PLANS.BASICO.minValue && basePrice <= VIP_PLANS.BASICO.maxValue) {
        return { ...VIP_PLANS.BASICO, type: 'VIP' };
    }
    if (basePrice >= VIP_PLANS.PADRAO.minValue && basePrice <= VIP_PLANS.PADRAO.maxValue) {
        return { ...VIP_PLANS.PADRAO, type: 'VIP' };
    }
    if (basePrice >= VIP_PLANS.COMPLETO.minValue && basePrice <= VIP_PLANS.COMPLETO.maxValue) {
        return { ...VIP_PLANS.COMPLETO, type: 'VIP' };
    }

    // Para valores acima do m√°ximo, considera como VIP COMPLETO
    if (basePrice > VIP_PLANS.COMPLETO.maxValue) {
        return { ...VIP_PLANS.COMPLETO, type: 'VIP' };
    }

    return null;
};

/**
 * Calcula pre√ßo do plano com uploader e per√≠odo
 */
export const calculateUserPlanWithUploader = (
    basePrice: number,
    hasDeemix: boolean,
    hasDeezerPremium: boolean,
    isUploader: boolean,
    period: PeriodType
): number => {
    let total = calculateUserRealPrice(basePrice, hasDeemix, hasDeezerPremium);

    if (basePrice >= 35 && isUploader) {
        if (period === 'MONTHLY') {
            total += UPLOADER_OPTION.monthlyPrice;
        } else if (period === 'QUARTERLY') {
            total += UPLOADER_OPTION.monthlyPrice * 0.95; // 5% desconto
        } else if (period === 'SEMIANNUAL' || period === 'ANNUAL') {
            // Uploader gr√°tis para semestral e anual
        }
    }

    return Math.round(total * 100) / 100;
};
