"use client";

// Configurações para evitar problemas de hidratação
export const dynamic = 'force-dynamic';

import { useEffect, useState, useCallback, useMemo } from 'react';
import { useSession } from 'next-auth/react';
import { Search, Filter, Users, TrendingUp, Heart, Download, Play, Pause, Upload, Star, X, Crown, ChevronLeft, ChevronRight, Music, Shuffle, MoreHorizontal, Clock } from 'lucide-react';
import { Track } from '@/types/track';
import Header from '@/components/layout/Header';
import Footer from '@/components/layout/Footer';
import MusicList from '@/components/music/MusicList';
import FooterSpacer from '@/components/layout/FooterSpacer';
import FiltersModal from '@/components/music/FiltersModal';
import { useToastContext } from '@/context/ToastContext';
import { useGlobalPlayer } from '@/context/GlobalPlayerContext';
import Image from 'next/image';
import Link from 'next/link';

// Função para obter informações sobre a comunidade baseada em dados reais
const getCommunityInfo = (stats: any): string => {
    if (!stats || stats.totalTracks === 0) {
        return 'A comunidade ainda não possui músicas enviadas. Seja o primeiro a compartilhar sua produção!';
    }

    const totalTracks = stats.totalTracks || 0;
    const totalDownloads = stats.totalDownloads || 0;
    const totalLikes = stats.totalLikes || 0;
    const activeUsers = stats.activeUsers || 0;

    let description = `Nossa comunidade é composta por ${activeUsers} usuários ativos que compartilharam ${totalTracks} música${totalTracks !== 1 ? 's' : ''} únicas. `;

    if (totalDownloads > 0) {
        description += `Essas músicas já foram baixadas ${totalDownloads} vez${totalDownloads !== 1 ? 'es' : ''}. `;
    }

    if (totalLikes > 0) {
        description += `Receberam ${totalLikes} curtida${totalLikes !== 1 ? 's' : ''} dos membros. `;
    }

    description += `Cada música representa a criatividade e talento de nossos DJs e produtores.`;

    return description;
};

export default function CommunityPage() {
    const { data: session } = useSession();
    const { showToast } = useToastContext();
    const { playTrack, isPlaying, currentTrack } = useGlobalPlayer();

    const [tracks, setTracks] = useState<Track[]>([]);
    const [loading, setLoading] = useState(true);
    const [searchQuery, setSearchQuery] = useState('');
    const [appliedSearchQuery, setAppliedSearchQuery] = useState('');
    const [showFiltersModal, setShowFiltersModal] = useState(false);
    const [hasActiveFilters, setHasActiveFilters] = useState(false);
    const [searchLoading, setSearchLoading] = useState(false);
    const [searchResults, setSearchResults] = useState<Track[]>([]);
    const [hasSearched, setHasSearched] = useState(false);

    // Estado para estatísticas da comunidade
    const [stats, setStats] = useState({
        totalDownloads: 0,
        totalLikes: 0,
        activeUsers: 0,
        communityScore: 0,
        totalTracks: 0
    });
    const [dataLoaded, setDataLoaded] = useState(false);

    // Estados para filtros
    const [selectedGenre, setSelectedGenre] = useState('all');
    const [selectedArtist, setSelectedArtist] = useState('all');
    const [selectedDateRange, setSelectedDateRange] = useState('all');
    const [selectedVersion, setSelectedVersion] = useState('all');
    const [selectedMonth, setSelectedMonth] = useState('all');
    const [selectedPool, setSelectedPool] = useState('all');

    // Estados para paginação
    const [currentPage, setCurrentPage] = useState(1);
    const [totalPages, setTotalPages] = useState(1);
    const [totalCount, setTotalCount] = useState(0);

    // Estados para fila de downloads
    const [downloadedTrackIds, setDownloadedTrackIds] = useState<number[]>([]);

    // Estados para filtros disponíveis
    const [genres, setGenres] = useState<string[]>([]);
    const [artists, setArtists] = useState<string[]>([]);
    const [versions, setVersions] = useState<string[]>([]);
    const [pools, setPools] = useState<string[]>([]);

    // Estados para carrossel
    const [currentSlide, setCurrentSlide] = useState(0);
    const [isHovered, setIsHovered] = useState(false);
    const [isClient, setIsClient] = useState(false);

    // Slides do carrossel
    const slides = [
        {
            title: "Deep House",
            description: "Batidas profundas e atmosféricas",
            color: "from-blue-500 to-purple-600",
            icon: Music
        },
        {
            title: "Techno",
            description: "Ritmos eletrônicos intensos",
            color: "from-red-500 to-orange-500",
            icon: TrendingUp
        },
        {
            title: "Progressive House",
            description: "Construções melódicas envolventes",
            color: "from-green-500 to-blue-500",
            icon: Star
        },
        {
            title: "Tech House",
            description: "Fusão de techno e house",
            color: "from-purple-500 to-pink-500",
            icon: Crown
        }
    ];

    // Função para buscar músicas da comunidade
    const fetchCommunityTracks = useCallback(async (resetPagination = false) => {
        try {
            setLoading(true);
            const page = resetPagination ? 1 : currentPage;

            // Construir query string para filtros
            const queryParams = new URLSearchParams();
            if (selectedGenre !== 'all') queryParams.append('genre', selectedGenre);
            if (selectedArtist !== 'all') queryParams.append('artist', selectedArtist);
            if (selectedDateRange !== 'all') queryParams.append('dateRange', selectedDateRange);
            if (selectedVersion !== 'all') queryParams.append('version', selectedVersion);
            if (selectedMonth !== 'all') queryParams.append('month', selectedMonth);
            if (selectedPool !== 'all') queryParams.append('pool', selectedPool);
            queryParams.append('page', page.toString());
            queryParams.append('limit', '50');

            const response = await fetch(`/api/tracks/community?${queryParams.toString()}`);

            if (response.ok) {
                const data = await response.json();

                if (resetPagination || page === 1) {
                    setTracks(data.tracks || []);
                } else {
                    setTracks(prev => [...prev, ...(data.tracks || [])]);
                }

                setTotalPages(data.totalPages || 1);
                setTotalCount(data.totalCount || 0);
            } else {
                console.error('Erro ao buscar músicas da comunidade');
                showToast('Erro ao carregar músicas da comunidade', 'error');
            }
        } catch (error) {
            console.error('Erro ao buscar músicas da comunidade:', error);
            showToast('Erro ao carregar músicas da comunidade', 'error');
        } finally {
            setLoading(false);
        }
    }, [currentPage, selectedGenre, selectedArtist, selectedDateRange, selectedVersion, selectedMonth, selectedPool, showToast]);

    // Função para buscar filtros disponíveis
    const fetchFilters = useCallback(async () => {
        try {
            const response = await fetch('/api/tracks/filters');
            if (response.ok) {
                const data = await response.json();
                setGenres(data.genres || []);
                setArtists(data.artists || []);
                setVersions(data.versions || []);
                setPools(data.pools || []);
            }
        } catch (error) {
            console.error('Erro ao buscar filtros:', error);
        }
    }, []);

    // Função para buscar estatísticas da comunidade
    const fetchCommunityStats = async () => {
        if (dataLoaded) return; // Evita re-chamadas

        try {
            const [statsResponse, activeUsersResponse] = await Promise.all([
                fetch('/api/tracks/community/stats'),
                fetch('/api/stats/active-users-today')
            ]);

            if (statsResponse.ok) {
                const statsData = await statsResponse.json();
                setStats(prevStats => ({
                    ...prevStats,
                    totalTracks: statsData.totalTracks || 0,
                    totalDownloads: statsData.totalDownloads || 0,
                    totalLikes: statsData.totalLikes || 0,
                    communityScore: Math.round((statsData.totalDownloads * 0.6) + (statsData.totalLikes * 0.4))
                }));
            }

            if (activeUsersResponse.ok) {
                const activeUsersData = await activeUsersResponse.json();
                setStats(prevStats => ({
                    ...prevStats,
                    activeUsers: activeUsersData.activeUsersToday || 0
                }));
            }

            setDataLoaded(true);
        } catch (error) {
            console.error('Erro ao buscar estatísticas da comunidade:', error);
        }
    };

    // Detectar quando o componente está no cliente
    useEffect(() => {
        setIsClient(true);
    }, []);

    // Carregar dados iniciais - Apenas uma vez
    useEffect(() => {
        if (isClient && !dataLoaded) {
            fetchFilters();
            fetchCommunityTracks();
            fetchCommunityStats();
        }
    }, [isClient, dataLoaded]); // Só executa se não foi carregado ainda

    // Sincronizar estado local com estado global do player
    useEffect(() => {
        if (isPlaying && currentTrack) {
            // Se o player global está tocando, verificar se é uma música da comunidade
            const isCommunityTrack = displayTracks.some(track =>
                track.id === currentTrack.id ||
                (track.songName === currentTrack.songName && track.artist === currentTrack.artist)
            );
            if (isCommunityTrack) {
                setIsCommunityPlaying(true);
            }
        } else {
            // Se o player global parou, pausar também o estado local
            setIsCommunityPlaying(false);
        }
    }, [isPlaying, currentTrack, displayTracks]);

    // Função para realizar busca
    const performSearch = async (query: string) => {
        if (!query.trim()) return;

        try {
            setSearchLoading(true);
            const response = await fetch(`/api/tracks/search?q=${encodeURIComponent(query)}`);

            if (response.ok) {
                const data = await response.json();
                setSearchResults(data.tracks || []);
                setAppliedSearchQuery(query);
                setHasSearched(true);

                // Atualizar URL com a pesquisa
                const searchParams = new URLSearchParams(window.location.search);
                searchParams.set('q', query);
                const newUrl = `${window.location.pathname}?${searchParams.toString()}`;
                window.history.pushState({}, '', newUrl);
            } else {
                setSearchResults([]);
                setAppliedSearchQuery(query);
                setHasSearched(true);
                showToast('Erro ao buscar músicas', 'error');
            }
        } catch (error) {
            console.error('Erro na busca:', error);
            setSearchResults([]);
            setAppliedSearchQuery(query);
            setHasSearched(true);
            showToast('Erro ao buscar músicas', 'error');
        } finally {
            setSearchLoading(false);
        }
    };

    // Função para limpar busca
    const clearSearch = () => {
        setSearchQuery('');
        setSearchResults([]);
        setAppliedSearchQuery('');
        setHasSearched(false);

        // Limpar URL da pesquisa
        const newUrl = window.location.pathname;
        window.history.pushState({}, '', newUrl);
    };

    // Função para aplicar filtros com debounce
    const handleApplyFilters = () => {
        setShowFiltersModal(false);
        setCurrentPage(1);

        // Debounce para evitar múltiplas chamadas
        setTimeout(() => {
            fetchCommunityTracks(true);
        }, 300);
    };

    // Função para limpar filtros
    const handleClearFilters = () => {
        setSelectedGenre('all');
        setSelectedArtist('all');
        setSelectedDateRange('all');
        setSelectedVersion('all');
        setSelectedMonth('all');
        setSelectedPool('all');
        setSearchQuery('');
        setAppliedSearchQuery('');
        setHasActiveFilters(false);
        setCurrentPage(1);
        fetchCommunityTracks(true);
        showToast('🧹 Filtros e pesquisa limpos!', 'success');
    };

    // Função para mudar filtros
    const handleGenreChange = (genre: string) => {
        setSelectedGenre(genre);
        setHasActiveFilters(true);
    };

    const handleArtistChange = (artist: string) => {
        setSelectedArtist(artist);
        setHasActiveFilters(true);
    };

    const handleDateRangeChange = (dateRange: string) => {
        setSelectedDateRange(dateRange);
        setHasActiveFilters(true);
    };

    const handleVersionChange = (version: string) => {
        setSelectedVersion(version);
        setHasActiveFilters(true);
    };

    const handleMonthChange = (month: string) => {
        setSelectedMonth(month);
        setHasActiveFilters(true);
    };

    // Determinar quais músicas mostrar
    const displayTracks = useMemo(() => {
        if (hasSearched) {
            return searchResults;
        }
        return tracks;
    }, [hasSearched, searchResults, tracks]);

    // Verificar se há músicas disponíveis para tocar
    const hasTracksAvailable = displayTracks.length > 0 && !loading;

    // Estado local para controlar play/pause da comunidade
    const [isCommunityPlaying, setIsCommunityPlaying] = useState(false);

    const handlePoolChange = (pool: string) => {
        setSelectedPool(pool);
        setHasActiveFilters(true);
    };

    // Função para atualizar IDs de tracks baixados
    const handleDownloadedTrackIdsChange = (newIds: number[] | ((prev: number[]) => number[])) => {
        if (typeof newIds === 'function') {
            setDownloadedTrackIds(newIds);
        } else {
            setDownloadedTrackIds(newIds);
        }
        localStorage.setItem('downloadedTrackIds', JSON.stringify(typeof newIds === 'function' ? newIds(downloadedTrackIds) : newIds));
    };

    return (
        <div className="min-h-screen bg-[#121212] overflow-x-hidden">
            {/* Header Fixo */}
            <Header />

            {/* Conteúdo Principal - Tela Cheia */}
            <div className="pt-12 lg:pt-16">
                {/* Header da página Community - Design Spotify */}
                <div className="w-full bg-gradient-to-b from-[#1db954]/20 via-[#1db954]/10 to-transparent">
                    <div className="w-full max-w-[95%] mx-auto px-2 sm:px-4 md:px-6 lg:px-8 xl:px-10 2xl:px-12 py-8 sm:py-12">
                        {/* Layout Spotify - Desktop */}
                        <div className="hidden sm:flex items-end gap-6">
                            {/* Cover da Comunidade */}
                            <div className="w-48 h-48 bg-gradient-to-br from-[#1db954] to-[#1ed760] rounded-lg flex items-center justify-center shadow-2xl flex-shrink-0">
                                <Users className="w-24 h-24 text-white" />
                            </div>

                            {/* Informações da Comunidade */}
                            <div className="flex-1 min-w-0">
                                <div className="text-sm text-[#b3b3b3] mb-2">Comunidade Pública</div>
                                <h1 className="text-5xl lg:text-6xl xl:text-7xl font-black text-white mb-4 leading-tight">
                                    COMUNIDADE
                                </h1>
                                <p className="text-[#b3b3b3] text-lg mb-4 max-w-2xl">
                                    {getCommunityInfo(stats)}
                                </p>

                                {/* Estatísticas */}
                                <div className="flex items-center gap-6 text-sm text-[#b3b3b3]">
                                    <div className="flex items-center gap-1">
                                        <div className="w-4 h-4 bg-[#1db954] rounded-full"></div>
                                        <span>Nexor Records</span>
                                    </div>
                                    <span>{stats.totalTracks.toLocaleString()} músicas</span>
                                    <span>{stats.totalDownloads.toLocaleString()} downloads</span>
                                    <span>{stats.totalLikes.toLocaleString()} curtidas</span>
                                </div>
                            </div>
                        </div>

                        {/* Layout Mobile - Mantém o design atual */}
                        <div className="sm:hidden text-center">
                            <h1 className="text-3xl sm:text-4xl md:text-5xl lg:text-6xl font-bold text-white mb-4">
                                Community
                            </h1>

                            {/* Seção Hero - Descrição da página Community */}
                            <div className="max-w-4xl mx-auto mb-8">
                                <div className="bg-[#181818] rounded-xl p-6 border border-[#282828] mb-6">
                                    <div className="text-[#b3b3b3] text-sm sm:text-base leading-relaxed space-y-4">
                                        <p>
                                            Bem-vindo à Community, o coração pulsante da música eletrônica brasileira. Aqui você encontra produções exclusivas de DJs e produtores da nossa comunidade, compartilhando suas criações mais inovadoras.
                                        </p>

                                        <p>
                                            🎵 Descubra talentos emergentes, explore novos estilos e conecte-se com produtores que estão moldando o futuro da música eletrônica. Cada track é uma expressão única da criatividade brasileira.
                                        </p>

                                        <p>
                                            🌟 Nossa comunidade é construída por produtores apaixonados que compartilham suas visões musicais. Aqui você encontra desde deep house até techno pesado, sempre com a qualidade e originalidade que caracteriza a cena brasileira.
                                        </p>

                                        <p className="text-[#1db954] font-semibold text-base sm:text-lg">
                                            Junte-se à comunidade e faça parte da revolução musical!
                                        </p>
                                    </div>
                                </div>
                            </div>

                            {/* Estatísticas */}
                            <div className="grid grid-cols-2 sm:grid-cols-4 gap-4 sm:gap-6 max-w-2xl mx-auto">
                                <div className="bg-[#181818] rounded-xl p-4 border border-[#282828]">
                                    <div className="text-2xl sm:text-3xl font-bold text-[#1db954] mb-1">
                                        {stats.totalTracks}
                                    </div>
                                    <div className="text-[#b3b3b3] text-sm">Músicas</div>
                                </div>

                                <div className="bg-[#181818] rounded-xl p-4 border border-[#282828]">
                                    <div className="text-2xl sm:text-3xl font-bold text-[#1db954] mb-1">
                                        {stats.totalDownloads.toLocaleString()}
                                    </div>
                                    <div className="text-[#b3b3b3] text-sm">Downloads</div>
                                </div>

                                <div className="bg-[#181818] rounded-xl p-4 border border-[#282828]">
                                    <div className="text-2xl sm:text-3xl font-bold text-[#1db954] mb-1">
                                        {stats.totalLikes.toLocaleString()}
                                    </div>
                                    <div className="text-[#b3b3b3] text-sm">Curtidas</div>
                                </div>

                                <div className="bg-[#181818] rounded-xl p-4 border border-[#282828]">
                                    <div className="text-2xl sm:text-3xl font-bold text-[#1db954] mb-1">
                                        {stats.activeUsers}
                                    </div>
                                    <div className="text-[#b3b3b3] text-sm">Usuários Ativos</div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                {/* Barra de Controles - Design Spotify */}
                <div className="w-full bg-[#181818] border-b border-[#282828]">
                    <div className="w-full max-w-[95%] mx-auto px-2 sm:px-4 md:px-6 lg:px-8 xl:px-10 2xl:px-12 py-4">
                        <div className="flex items-center gap-4">
                            {/* Botão Play Principal */}
                            <button
                                onClick={() => {
                                    if (hasTracksAvailable) {
                                        if (isCommunityPlaying) {
                                            // Pausar música atual
                                            setIsCommunityPlaying(false);
                                            showToast('⏸️ Música pausada', 'info');
                                        } else {
                                            // Tocar a primeira música da lista
                                            playTrack(displayTracks[0]);
                                            setIsCommunityPlaying(true);
                                            showToast('🎵 Tocando músicas da comunidade!', 'success');
                                        }
                                    } else {
                                        showToast('Nenhuma música disponível para tocar', 'warning');
                                    }
                                }}
                                disabled={!hasTracksAvailable}
                                className={`w-14 h-14 ${isCommunityPlaying ? 'bg-[#1ed760]' : 'bg-[#1db954] hover:bg-[#1ed760]'} disabled:bg-[#535353] disabled:cursor-not-allowed rounded-full flex items-center justify-center shadow-lg hover:scale-105 transition-all duration-200 disabled:hover:scale-100`}
                            >
                                {!hasTracksAvailable ? (
                                    <Play className="w-6 h-6 text-gray-400 ml-1" />
                                ) : isCommunityPlaying ? (
                                    <Pause className="w-6 h-6 text-black" />
                                ) : (
                                    <Play className="w-6 h-6 text-black ml-1" />
                                )}
                            </button>

                            {/* Botões de Ação */}
                            <div className="flex items-center gap-2">
                                <button
                                    onClick={() => {
                                        if (hasTracksAvailable) {
                                            // Selecionar uma música aleatória
                                            const randomIndex = Math.floor(Math.random() * displayTracks.length);
                                            const randomTrack = displayTracks[randomIndex];
                                            playTrack(randomTrack);
                                            showToast(`🎲 Tocando ${randomTrack.songName} - ${randomTrack.artist}`, 'success');
                                        } else {
                                            showToast('Nenhuma música disponível para tocar', 'warning');
                                        }
                                    }}
                                    disabled={!hasTracksAvailable}
                                    className="w-10 h-10 bg-[#282828] hover:bg-[#3e3e3e] disabled:bg-[#535353] disabled:cursor-not-allowed rounded-full flex items-center justify-center transition-colors"
                                >
                                    <Shuffle className="w-5 h-5 text-white" />
                                </button>

                                <button
                                    onClick={() => {
                                        if (hasTracksAvailable) {
                                            // Iniciar download de todas as músicas da comunidade
                                            const tracksToDownload = displayTracks.filter(track =>
                                                !downloadedTrackIds.includes(track.id)
                                            );

                                            if (tracksToDownload.length === 0) {
                                                showToast('✅ Todas as músicas já foram baixadas!', 'success');
                                            } else {
                                                showToast(`📥 Iniciando download de ${tracksToDownload.length} músicas da comunidade...`, 'success');
                                                // Aqui você pode implementar a lógica de download em lote
                                                // Por enquanto, vamos simular o download
                                                tracksToDownload.forEach(track => {
                                                    setTimeout(() => {
                                                        setDownloadedTrackIds(prev => [...prev, track.id]);
                                                        localStorage.setItem('downloadedTrackIds', JSON.stringify([...downloadedTrackIds, track.id]));
                                                    }, Math.random() * 1000);
                                                });
                                            }
                                        } else {
                                            showToast('Nenhuma música disponível para baixar', 'warning');
                                        }
                                    }}
                                    disabled={!hasTracksAvailable}
                                    className="w-10 h-10 bg-[#282828] hover:bg-[#3e3e3e] disabled:bg-[#535353] disabled:cursor-not-allowed rounded-full flex items-center justify-center transition-colors"
                                >
                                    <Download className="w-5 h-5 text-white" />
                                </button>

                            </div>

                            {/* Campo de Busca */}
                            <div className="flex-1 flex justify-center">
                                <div className="relative w-full max-w-md">
                                    <input
                                        type="text"
                                        placeholder="Buscar músicas da comunidade..."
                                        value={searchQuery}
                                        onChange={(e) => setSearchQuery(e.target.value)}
                                        onKeyPress={(e) => e.key === 'Enter' && performSearch(searchQuery)}
                                        className="w-full px-4 py-2 bg-[#282828] text-white rounded-lg border border-[#3e3e3e] focus:border-[#1db954] focus:outline-none transition-colors placeholder-[#b3b3b3]"
                                    />
                                    {searchQuery && (
                                        <button
                                            onClick={clearSearch}
                                            className="absolute right-3 top-1/2 transform -translate-y-1/2 text-[#b3b3b3] hover:text-white transition-colors"
                                        >
                                            <X size={16} />
                                        </button>
                                    )}
                                </div>
                            </div>

                            {/* Busca e Filtros */}
                            <div className="flex gap-2">
                                <button
                                    onClick={() => performSearch(searchQuery)}
                                    disabled={searchLoading || !searchQuery.trim()}
                                    className="px-4 py-2 bg-[#1db954] text-white rounded-lg hover:bg-[#1ed760] disabled:bg-[#535353] disabled:cursor-not-allowed transition h-10 min-w-[120px] text-sm font-medium shadow-lg"
                                >
                                    {searchLoading ? "Buscando..." : "Buscar"}
                                </button>
                                <button
                                    onClick={() => setShowFiltersModal(true)}
                                    className="flex items-center justify-center gap-2 px-4 py-2 bg-[#282828] text-white rounded-lg hover:bg-[#3e3e3e] transition h-10 min-w-[120px] text-sm border border-[#3e3e3e]"
                                >
                                    <Filter size={18} /> Filtros
                                </button>
                            </div>
                        </div>
                    </div>
                </div>

                {/* Aviso Mobile - Igual à página /new */}
                <div className="block sm:hidden w-full max-w-[95%] mx-auto px-3 sm:px-6 md:px-8 mb-8">
                    <div className="bg-[#2a2a2a] rounded-xl p-4 border border-[#3a3a3a]">
                        <div className="flex items-center gap-3">
                            <svg className="w-5 h-5 text-[#1db954] flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z" />
                            </svg>
                            <div className="text-white text-sm">
                                <p className="font-medium">Acesso Mobile</p>
                                <p className="text-[#b3b3b3] text-xs">Para uma melhor experiência, acesse através de um computador</p>
                            </div>
                        </div>
                    </div>
                </div>

                {/* Seção de Busca Mobile */}
                <div className="block sm:hidden w-full max-w-[95%] mx-auto px-3 sm:px-6 md:px-8 mb-8">
                    <div className="bg-[#181818] rounded-xl p-6 border border-[#282828]">
                        <div className="flex flex-col gap-3 w-full">
                            <div className="relative">
                                <input
                                    type="text"
                                    placeholder="Buscar músicas da comunidade..."
                                    value={searchQuery}
                                    onChange={(e) => setSearchQuery(e.target.value)}
                                    onKeyPress={(e) => e.key === 'Enter' && performSearch(searchQuery)}
                                    className="w-full px-4 py-2 bg-[#282828] text-white rounded-lg border border-[#3e3e3e] focus:border-[#1db954] focus:outline-none transition-colors placeholder-[#b3b3b3]"
                                />
                                {searchQuery && (
                                    <button
                                        onClick={clearSearch}
                                        className="absolute right-3 top-1/2 transform -translate-y-1/2 text-[#b3b3b3] hover:text-white transition-colors"
                                    >
                                        <X size={16} />
                                    </button>
                                )}
                            </div>
                            <div className="flex gap-3">
                                <button
                                    onClick={() => performSearch(searchQuery)}
                                    disabled={searchLoading || !searchQuery.trim()}
                                    className="flex-1 px-4 py-2 bg-[#1db954] text-white rounded-lg hover:bg-[#1ed760] disabled:bg-[#535353] disabled:cursor-not-allowed transition h-10 text-sm font-medium shadow-lg"
                                >
                                    {searchLoading ? "Buscando..." : "Buscar"}
                                </button>
                                <button
                                    onClick={() => setShowFiltersModal(true)}
                                    className="flex items-center justify-center gap-2 px-4 py-2 bg-[#282828] text-white rounded-lg hover:bg-[#3e3e3e] transition h-10 text-sm border border-[#3e3e3e]"
                                >
                                    <Filter size={18} /> Filtros
                                </button>
                            </div>
                        </div>
                    </div>
                </div>

                {/* Seção de Login */}
                {!session && (
                    <div className="w-full max-w-[95%] mx-auto px-3 sm:px-6 md:px-8 mb-8">
                        <div className="bg-[#181818]/80 backdrop-blur-sm rounded-xl p-6 border border-[#282828]/50 text-center">
                            <div className="flex items-center justify-center gap-3 mb-4">
                                <div className="w-12 h-12 bg-gradient-to-br from-[#1db954] to-[#1ed760] rounded-xl flex items-center justify-center">
                                    <Users className="h-6 w-6 text-white" />
                                </div>
                                <h2 className="text-white text-xl font-bold">Junte-se à Comunidade</h2>
                            </div>
                            <p className="text-[#b3b3b3] mb-6 max-w-2xl mx-auto">
                                Faça login para ouvir as prévias, curtir músicas e baixar as faixas mais populares da comunidade.
                            </p>
                            <div className="flex flex-col sm:flex-row gap-4 justify-center">
                                <Link href="/auth/sign-in">
                                    <button className="bg-[#1db954] hover:bg-[#1ed760] text-white px-6 py-3 rounded-lg font-semibold transition-all duration-300 hover:scale-105">
                                        Fazer Login
                                    </button>
                                </Link>
                                <Link href="/auth/sign-up">
                                    <button className="bg-[#282828] hover:bg-[#3e3e3e] text-white px-6 py-3 rounded-lg font-semibold transition-all duration-300 hover:scale-105">
                                        Criar Conta
                                    </button>
                                </Link>
                            </div>
                        </div>
                    </div>
                )}

                {/* Lista de Músicas - Desktop (Spotify) e Mobile (MusicList) */}
                <div className="w-full max-w-[95%] mx-auto px-3 sm:px-6 md:px-8 mb-8">
                    {loading ? (
                        <div className="flex items-center justify-center py-16">
                            <div className="text-center">
                                <div className="animate-spin w-12 h-12 border-4 border-[#1db954] border-t-transparent rounded-full mx-auto mb-4"></div>
                                <p className="text-[#b3b3b3] text-lg">Carregando músicas da comunidade...</p>
                            </div>
                        </div>
                    ) : (
                        <>
                            {/* Versão Desktop - Tabela Spotify */}
                            <div className="hidden sm:block bg-[#181818] rounded-lg border border-[#282828] overflow-hidden">
                                {/* Header da Tabela */}
                                <div className="px-6 py-4 border-b border-[#282828]">
                                    <div className="grid grid-cols-12 gap-4 text-[#b3b3b3] text-sm font-medium">
                                        <div className="col-span-1">#</div>
                                        <div className="col-span-5">Título</div>
                                        <div className="col-span-3">Álbum</div>
                                        <div className="col-span-2">Adicionada em</div>
                                        <div className="col-span-1 flex justify-center">
                                            <Clock className="w-4 h-4" />
                                        </div>
                                    </div>
                                </div>

                                {/* Lista de Músicas */}
                                <div className="divide-y divide-[#282828]">
                                    {displayTracks.map((track, index) => (
                                        <div
                                            key={track.id}
                                            className="px-6 py-3 hover:bg-[#282828]/50 transition-colors group cursor-pointer relative"
                                            onClick={() => playTrack(track)}
                                        >
                                            <div className="grid grid-cols-12 gap-4 items-center">
                                                {/* Número da Faixa */}
                                                <div className="col-span-1 text-[#b3b3b3] text-sm group-hover:text-white transition-colors">
                                                    {currentTrack && (currentTrack.id === track.id ||
                                                        (currentTrack.songName === track.songName && currentTrack.artist === track.artist)) && isPlaying ? (
                                                        <div className="w-4 h-4 text-[#1db954]">
                                                            <div className="w-1 h-4 bg-[#1db954] mx-0.5 rounded-full animate-pulse"></div>
                                                            <div className="w-1 h-4 bg-[#1db954] mx-0.5 rounded-full animate-pulse" style={{ animationDelay: '0.1s' }}></div>
                                                        </div>
                                                    ) : (
                                                        index + 1
                                                    )}
                                                </div>

                                                {/* Título e Artista */}
                                                <div className="col-span-5 flex items-center gap-3">
                                                    {/* Thumbnail */}
                                                    <div className={`w-12 h-12 rounded flex items-center justify-center flex-shrink-0 relative ${downloadedTrackIds.includes(track.id)
                                                        ? 'bg-[#1db954]'
                                                        : 'bg-gradient-to-br from-[#1db954] to-[#1ed760]'
                                                        }`}>
                                                        {downloadedTrackIds.includes(track.id) && (
                                                            <div className="absolute -top-1 -right-1 w-4 h-4 bg-[#1db954] rounded-full flex items-center justify-center">
                                                                <Download className="w-2 h-2 text-white" />
                                                            </div>
                                                        )}
                                                        {track.imageUrl ? (
                                                            <Image
                                                                src={track.imageUrl}
                                                                alt={track.songName}
                                                                width={48}
                                                                height={48}
                                                                className="w-12 h-12 rounded object-cover"
                                                            />
                                                        ) : (
                                                            <Music className="w-6 h-6 text-white" />
                                                        )}
                                                    </div>

                                                    {/* Informações da Música */}
                                                    <div className="min-w-0 flex-1">
                                                        <div className="text-white font-medium truncate group-hover:text-[#1db954] transition-colors">
                                                            {track.songName}
                                                        </div>
                                                        <div className="text-[#b3b3b3] text-sm truncate">
                                                            {track.artist}
                                                        </div>
                                                    </div>
                                                </div>

                                                {/* Álbum */}
                                                <div className="col-span-3 text-[#b3b3b3] text-sm truncate group-hover:text-white transition-colors">
                                                    {track.album || track.songName}
                                                </div>

                                                {/* Data de Adição */}
                                                <div className="col-span-2 text-[#b3b3b3] text-sm truncate">
                                                    {track.releaseDate ? new Date(track.releaseDate).toLocaleDateString('pt-BR') : 'Hoje'}
                                                </div>

                                                {/* Duração */}
                                                <div className="col-span-1 text-[#b3b3b3] text-sm text-center group-hover:text-white transition-colors">
                                                    {track.duration || '3:00'}
                                                </div>
                                            </div>

                                            {/* Botões de Ação (visíveis no hover) */}
                                            <div className="absolute right-6 top-1/2 transform -translate-y-1/2 opacity-0 group-hover:opacity-100 transition-opacity">
                                                <div className="flex items-center gap-2">
                                                    {/* Botão Like */}
                                                    <button
                                                        onClick={(e) => {
                                                            e.stopPropagation();
                                                            showToast('❤️ Música curtida!', 'success');
                                                        }}
                                                        className="w-8 h-8 bg-[#282828] hover:bg-[#3e3e3e] rounded-full flex items-center justify-center transition-colors"
                                                    >
                                                        <Heart className="w-4 h-4 text-white" />
                                                    </button>

                                                    {/* Botão Download */}
                                                    <button
                                                        onClick={(e) => {
                                                            e.stopPropagation();
                                                            if (downloadedTrackIds.includes(track.id)) {
                                                                showToast('✅ Música já foi baixada!', 'info');
                                                            } else {
                                                                setDownloadedTrackIds(prev => [...prev, track.id]);
                                                                localStorage.setItem('downloadedTrackIds', JSON.stringify([...downloadedTrackIds, track.id]));
                                                                showToast('📥 Música baixada com sucesso!', 'success');
                                                            }
                                                        }}
                                                        className={`w-8 h-8 rounded-full flex items-center justify-center transition-colors ${downloadedTrackIds.includes(track.id)
                                                            ? 'bg-[#1db954] text-white'
                                                            : 'bg-[#282828] hover:bg-[#3e3e3e] text-white'
                                                            }`}
                                                    >
                                                        <Download className="w-4 h-4" />
                                                    </button>
                                                </div>
                                            </div>
                                        </div>
                                    ))}
                                </div>

                                {/* Mensagem quando não há músicas */}
                                {displayTracks.length === 0 && (
                                    <div className="px-6 py-12 text-center">
                                        <Music className="w-16 h-16 text-[#b3b3b3] mx-auto mb-4" />
                                        <p className="text-[#b3b3b3] text-lg">Nenhuma música encontrada</p>
                                        <p className="text-[#b3b3b3] text-sm">Tente ajustar os filtros ou fazer uma nova busca</p>
                                    </div>
                                )}
                            </div>

                            {/* Versão Mobile - MusicList Antiga */}
                            <div className="sm:hidden">
                                <MusicList
                                    tracks={hasSearched ? searchResults : tracks}
                                    downloadedTrackIds={downloadedTrackIds}
                                    setDownloadedTrackIds={setDownloadedTrackIds}
                                    enableInfiniteScroll={false}
                                    hasMore={false}
                                    isLoading={loading || searchLoading}
                                    onLoadMore={() => { }}
                                />
                            </div>
                        </>
                    )}
                </div>

                <FooterSpacer />

                {/* Modal de Filtros */}
                <FiltersModal
                    isOpen={showFiltersModal}
                    onClose={() => setShowFiltersModal(false)}
                    genres={genres}
                    artists={artists}
                    versions={versions}
                    pools={pools}
                    monthOptions={[]}
                    selectedGenre={selectedGenre}
                    selectedArtist={selectedArtist}
                    selectedDateRange={selectedDateRange}
                    selectedVersion={selectedVersion}
                    selectedMonth={selectedMonth}
                    selectedPool={selectedPool}
                    onGenreChange={handleGenreChange}
                    onArtistChange={handleArtistChange}
                    onDateRangeChange={handleDateRangeChange}
                    onVersionChange={handleVersionChange}
                    onMonthChange={handleMonthChange}
                    onPoolChange={handlePoolChange}
                    onApplyFilters={handleApplyFilters}
                    onClearFilters={handleClearFilters}
                    isLoading={loading}
                    hasActiveFilters={hasActiveFilters}
                />
            </div>

            <Footer />
        </div>
    );
} 