import { NextRequest, NextResponse } from 'next/server';
import { getServerSession } from 'next-auth';
import { authOptions } from '@/lib/authOptions';
import { prisma } from '@/lib/prisma';
import ytdl from '@distube/ytdl-core';
import fs from 'fs';
import path from 'path';
import { spawn } from 'child_process';

// Fun√ß√£o para encontrar o FFmpeg
function getFFmpegPath(): string | null {
    try {
        // Tentar ffmpeg-static primeiro
        const ffmpegStatic = require('ffmpeg-static');
        if (ffmpegStatic && fs.existsSync(ffmpegStatic)) {
            console.log('üé¨ Usando FFmpeg-static:', ffmpegStatic);
            return ffmpegStatic;
        }
    } catch (error) {
        console.log('‚ö†Ô∏è FFmpeg-static n√£o dispon√≠vel:', error);
    }

    // Fallback para FFmpeg global
    console.log('üé¨ Tentando FFmpeg global...');
    return 'ffmpeg'; // Assume que est√° no PATH
}

// Configura√ß√µes para diferentes cen√°rios
const ytdlConfigs = [
    {
        name: 'Configura√ß√£o padr√£o',
        options: {
            filter: 'audioonly',
            quality: 'highestaudio'
        }
    },
    {
        name: 'Configura√ß√£o alternativa 1',
        options: {
            filter: 'audioonly',
            quality: 'highestaudio',
            requestOptions: {
                headers: {
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
                }
            }
        }
    },
    {
        name: 'Configura√ß√£o alternativa 2',
        options: {
            filter: 'audioonly',
            quality: 'highestaudio',
            requestOptions: {
                headers: {
                    'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36'
                }
            }
        }
    }
];

export async function POST(req: NextRequest) {
    try {
        // Verificar autentica√ß√£o
        const session = await getServerSession(authOptions);
        if (!session?.user?.email) {
            return NextResponse.json({ error: 'Usu√°rio n√£o autenticado' }, { status: 401 });
        }

        // Verificar se √© VIP
        const user = await prisma.user.findUnique({
            where: { email: session.user.email },
            select: { id: true, is_vip: true }
        });

        if (!user?.is_vip) {
            return NextResponse.json({
                error: 'Acesso negado. Apenas usu√°rios VIP podem usar esta ferramenta.'
            }, { status: 403 });
        }

        const { url, title, quality = '320' } = await req.json();

        if (!url) {
            return NextResponse.json({ error: 'URL do YouTube √© obrigat√≥ria' }, { status: 400 });
        }

        // Validar qualidade
        if (!['128', '320'].includes(quality)) {
            return NextResponse.json({ error: 'Qualidade inv√°lida. Use 128 ou 320' }, { status: 400 });
        }

        // Validar URL do YouTube
        if (!ytdl.validateURL(url)) {
            return NextResponse.json({ error: 'URL do YouTube inv√°lida' }, { status: 400 });
        }

        // Tentar obter informa√ß√µes do v√≠deo com diferentes configura√ß√µes
        let videoInfo;
        let lastError;

        for (const config of ytdlConfigs) {
            try {
                console.log(`üîç Tentando com: ${config.name}`);
                videoInfo = await ytdl.getInfo(url, config.options);
                console.log(`‚úÖ Sucesso com: ${config.name}`);
                break;
            } catch (error: any) {
                console.error(`‚ùå Falha com ${config.name}:`, error?.message || error);
                lastError = error;
                continue;
            }
        }

        if (!videoInfo) {
            console.error('‚ùå Todas as tentativas falharam');
            return NextResponse.json({
                error: 'N√£o foi poss√≠vel obter informa√ß√µes do v√≠deo. Tente novamente mais tarde.'
            }, { status: 400 });
        }

        const videoTitle = title || videoInfo.videoDetails.title;

        // Sanitizar nome do arquivo
        const sanitizedTitle = videoTitle
            .replace(/[^\w\s-]/g, '')
            .replace(/\s+/g, '_')
            .substring(0, 50);

        // Criar pasta de downloads se n√£o existir
        const downloadsDir = path.join(process.cwd(), 'downloads');
        if (!fs.existsSync(downloadsDir)) {
            fs.mkdirSync(downloadsDir, { recursive: true });
        }

        // Arquivos tempor√°rios e finais
        const tempFileName = `temp_${Date.now()}.webm`;
        const finalFileName = `${sanitizedTitle}_${quality}kbps.mp3`;
        const tempFilePath = path.join(downloadsDir, tempFileName);
        const finalFilePath = path.join(downloadsDir, finalFileName);

        // Primeiro, tentar download direto com qualidade espec√≠fica (mais r√°pido e confi√°vel)
        console.log(`üéµ Tentando download direto com qualidade ${quality} KBPS...`);
        let downloadSuccess = await downloadDirectWithQuality(url, finalFilePath, quality);

        // Se download direto falhar, tentar m√©todo com convers√£o FFmpeg
        if (!downloadSuccess) {
            console.log('üîÑ Download direto falhou, tentando com convers√£o FFmpeg...');

            downloadSuccess = false;
            let downloadError;

            for (const config of ytdlConfigs) {
                try {
                    console.log(`üì• Tentando download com: ${config.name}`);

                    const audioStream = ytdl(url, {
                        filter: 'audioonly',
                        quality: 'highestaudio'
                    });
                    const writeStream = fs.createWriteStream(tempFilePath);

                    await new Promise((resolve, reject) => {
                        audioStream.pipe(writeStream);

                        writeStream.on('finish', () => {
                            console.log(`‚úÖ Download do √°udio original conclu√≠do com: ${config.name}`);
                            downloadSuccess = true;
                            resolve(true);
                        });

                        writeStream.on('error', (error) => {
                            console.error(`‚ùå Erro no download com ${config.name}:`, error);
                            downloadError = error;
                            reject(error);
                        });

                        audioStream.on('error', (error) => {
                            console.error(`‚ùå Erro no stream com ${config.name}:`, error);
                            downloadError = error;
                            reject(error);
                        });
                    });

                    if (downloadSuccess) break;

                } catch (error: any) {
                    console.error(`‚ùå Falha no download com ${config.name}:`, error?.message || error);
                    downloadError = error;
                    continue;
                }
            }

            if (!downloadSuccess) {
                // Limpar arquivo tempor√°rio se existir
                if (fs.existsSync(tempFilePath)) {
                    fs.unlinkSync(tempFilePath);
                }
                return NextResponse.json({
                    error: 'Erro durante o download. Tente novamente.'
                }, { status: 500 });
            }

            // Verificar se o arquivo tempor√°rio foi criado
            if (!fs.existsSync(tempFilePath)) {
                return NextResponse.json({
                    error: 'Arquivo tempor√°rio n√£o foi criado corretamente'
                }, { status: 500 });
            }

            // Converter para MP3 com a qualidade especificada usando FFmpeg
            console.log(`üîÑ Convertendo para MP3 ${quality} KBPS...`);

            let conversionSuccess = await convertToMp3(tempFilePath, finalFilePath, quality);

            // Se FFmpeg falhar, tentar download direto com qualidade espec√≠fica
            if (!conversionSuccess) {
                console.log('üîÑ FFmpeg falhou, tentando download direto com qualidade espec√≠fica...');

                // Limpar arquivo tempor√°rio
                if (fs.existsSync(tempFilePath)) {
                    fs.unlinkSync(tempFilePath);
                }

                conversionSuccess = await downloadDirectWithQuality(url, finalFilePath, quality);
            } else {
                // Limpar arquivo tempor√°rio apenas se a convers√£o foi bem-sucedida
                if (fs.existsSync(tempFilePath)) {
                    fs.unlinkSync(tempFilePath);
                }
            }

            if (!conversionSuccess) {
                return NextResponse.json({
                    error: 'Erro durante a convers√£o para MP3. Tente novamente ou entre em contato com o suporte.'
                }, { status: 500 });
            }
        }        // Verificar se o arquivo final foi criado
        if (!fs.existsSync(finalFilePath)) {
            return NextResponse.json({
                error: 'Arquivo MP3 n√£o foi criado corretamente'
            }, { status: 500 });
        }

        const fileSize = fs.statSync(finalFilePath).size;
        const downloadUrl = `/downloads/${finalFileName}`;

        // Salvar no banco de dados
        const expiresAt = new Date();
        expiresAt.setDate(expiresAt.getDate() + 5); // 5 dias

        // TODO: Criar tabela youTubeDownload no schema se necess√°rio
        // let downloadRecord = null;
        // try {
        //     downloadRecord = await prisma.youTubeDownload.create({
        //         data: {
        //             userId: user.id,
        //             url,
        //             title: videoTitle,
        //             fileName: finalFileName,
        //             fileSize,
        //             downloadUrl,
        //             expiresAt
        //         }
        //     });
        // } catch (error) {
        //     console.log('Erro ao salvar no banco de dados:', error);
        // }

        return NextResponse.json({
            success: true,
            message: `Download conclu√≠do com sucesso! Arquivo convertido para ${quality} KBPS.`,
            fileName: finalFileName,
            title: videoTitle,
            downloadUrl: downloadUrl,
            fileSize: fileSize,
            quality: `${quality} KBPS`,
            id: null, // downloadRecord?.id || null,
            expiresAt: expiresAt // downloadRecord?.expiresAt || null
        });

    } catch (error) {
        console.error('Erro no download do YouTube:', error);
        return NextResponse.json({
            error: 'Erro interno do servidor'
        }, { status: 500 });
    }
}

// Fun√ß√£o para converter √°udio para MP3 com qualidade espec√≠fica
async function convertToMp3(inputPath: string, outputPath: string, quality: string): Promise<boolean> {
    return new Promise((resolve) => {
        const ffmpegPath = getFFmpegPath();

        if (!ffmpegPath) {
            console.error('‚ùå FFmpeg n√£o encontrado');
            resolve(false);
            return;
        }

        const bitrateValue = quality === '128' ? '128k' : '320k';

        console.log(`üé¨ Convertendo com FFmpeg: ${ffmpegPath}`);
        console.log(`üìä Qualidade: ${bitrateValue}`);

        const ffmpeg = spawn(ffmpegPath, [
            '-i', inputPath,
            '-vn', // Remove v√≠deo
            '-codec:a', 'libmp3lame', // Codec MP3
            '-b:a', bitrateValue, // Taxa de bits espec√≠fica
            '-maxrate', bitrateValue, // Taxa m√°xima
            '-minrate', bitrateValue, // Taxa m√≠nima (for√ßa CBR)
            '-ar', '44100', // Sample rate
            '-ac', '2', // Stereo
            '-f', 'mp3', // Formato MP3
            '-write_xing', '0', // Desabilitar cabe√ßalho Xing para VBR
            '-map_metadata', '-1', // Remove metadados
            '-y', // Sobrescrever arquivo existente
            outputPath
        ], {
            stdio: ['pipe', 'pipe', 'pipe']
        });

        let stderr = '';
        let stdout = '';

        ffmpeg.stdout.on('data', (data) => {
            stdout += data.toString();
        });

        ffmpeg.stderr.on('data', (data) => {
            stderr += data.toString();
        });

        ffmpeg.on('close', (code) => {
            if (code === 0) {
                console.log(`‚úÖ Convers√£o para MP3 ${quality} KBPS conclu√≠da com sucesso`);

                // Verificar o bitrate real do arquivo gerado
                verifyActualBitrate(outputPath, quality);

                resolve(true);
            } else {
                console.error(`‚ùå Erro na convers√£o FFmpeg (c√≥digo ${code}):`);
                console.error('STDERR:', stderr);
                console.error('STDOUT:', stdout);
                resolve(false);
            }
        });

        ffmpeg.on('error', (error) => {
            console.error('‚ùå Erro ao executar FFmpeg:', error);

            // Se falhar com ffmpeg-static, tentar com ffmpeg global
            if (ffmpegPath !== 'ffmpeg') {
                console.log('üîÑ Tentando com FFmpeg global...');

                const ffmpegGlobal = spawn('ffmpeg', [
                    '-i', inputPath,
                    '-vn',
                    '-codec:a', 'libmp3lame',
                    '-b:a', bitrateValue,
                    '-maxrate', bitrateValue,
                    '-minrate', bitrateValue,
                    '-ar', '44100',
                    '-ac', '2',
                    '-f', 'mp3',
                    '-write_xing', '0',
                    '-map_metadata', '-1',
                    '-y',
                    outputPath
                ]);

                ffmpegGlobal.on('close', (code) => {
                    if (code === 0) {
                        console.log(`‚úÖ Convers√£o com FFmpeg global conclu√≠da (${quality} KBPS)`);
                        resolve(true);
                    } else {
                        console.error(`‚ùå FFmpeg global tamb√©m falhou (c√≥digo ${code})`);
                        resolve(false);
                    }
                });

                ffmpegGlobal.on('error', (globalError) => {
                    console.error('‚ùå FFmpeg global n√£o dispon√≠vel:', globalError);
                    resolve(false);
                });
            } else {
                resolve(false);
            }
        });
    });
}

// Fun√ß√£o alternativa para download direto com qualidade espec√≠fica (fallback)
async function downloadDirectWithQuality(url: string, outputPath: string, quality: string): Promise<boolean> {
    return new Promise(async (resolve) => {
        try {
            console.log(`üéµ Tentando download direto com qualidade ${quality}...`);

            // Buscar o melhor formato de √°udio dispon√≠vel
            const info = await ytdl.getInfo(url);
            const audioFormats = ytdl.filterFormats(info.formats, 'audioonly');

            let selectedFormat;
            if (quality === '128') {
                // Para 128kbps, buscar formato de qualidade m√©dia
                selectedFormat = audioFormats.find(format =>
                    format.audioBitrate && format.audioBitrate <= 128
                ) || audioFormats.find(format =>
                    format.audioQuality === 'AUDIO_QUALITY_LOW'
                ) || audioFormats[audioFormats.length - 1]; // Pior qualidade
            } else {
                // Para 320kbps, buscar a melhor qualidade
                selectedFormat = audioFormats.find(format =>
                    format.audioBitrate && format.audioBitrate >= 128
                ) || audioFormats.find(format =>
                    format.audioQuality === 'AUDIO_QUALITY_MEDIUM'
                ) || audioFormats[0]; // Melhor qualidade
            }

            console.log(`üéµ Formato selecionado: ${selectedFormat?.itag}, bitrate: ${selectedFormat?.audioBitrate}kbps`);

            const audioStream = ytdl.downloadFromInfo(info, { format: selectedFormat });
            const writeStream = fs.createWriteStream(outputPath);

            audioStream.pipe(writeStream);

            writeStream.on('finish', () => {
                console.log(`‚úÖ Download direto conclu√≠do (${quality} KBPS)`);
                console.log(`üìÅ Arquivo salvo: ${outputPath}`);

                // Verificar o tamanho do arquivo
                const stats = fs.statSync(outputPath);
                const fileSizeMB = (stats.size / (1024 * 1024)).toFixed(2);
                console.log(`üìä Tamanho do arquivo: ${fileSizeMB} MB`);

                resolve(true);
            });

            writeStream.on('error', (error) => {
                console.error('‚ùå Erro no download direto:', error);
                resolve(false);
            });

            audioStream.on('error', (error) => {
                console.error('‚ùå Erro no stream direto:', error);
                resolve(false);
            });

        } catch (error) {
            console.error('‚ùå Erro no download direto:', error);
            resolve(false);
        }
    });
}

// GET para obter informa√ß√µes do v√≠deo
export async function GET(req: NextRequest) {
    try {
        const session = await getServerSession(authOptions);
        if (!session?.user?.email) {
            return NextResponse.json({ error: 'Usu√°rio n√£o autenticado' }, { status: 401 });
        }

        // Verificar se √© VIP
        const user = await prisma.user.findUnique({
            where: { email: session.user.email },
            select: { is_vip: true }
        });

        if (!user?.is_vip) {
            return NextResponse.json({
                error: 'Acesso negado. Apenas usu√°rios VIP podem usar esta ferramenta.'
            }, { status: 403 });
        }

        const { searchParams } = new URL(req.url);
        const url = searchParams.get('url');

        if (!url) {
            return NextResponse.json({ error: 'URL do YouTube √© obrigat√≥ria' }, { status: 400 });
        }

        if (!ytdl.validateURL(url)) {
            return NextResponse.json({ error: 'URL do YouTube inv√°lida' }, { status: 400 });
        }

        // Verificar se √© uma playlist
        if (url.includes('playlist') || url.includes('&list=')) {
            return NextResponse.json({
                error: 'Esta ferramenta n√£o suporta playlists. Para download de playlists, recomendamos o uso do Allavsoft.'
            }, { status: 400 });
        }

        // Tentar obter informa√ß√µes com diferentes configura√ß√µes
        let videoInfo;
        let lastError;

        for (const config of ytdlConfigs) {
            try {
                console.log(`üîç Tentando obter info com: ${config.name}`);
                videoInfo = await ytdl.getInfo(url, config.options);
                console.log(`‚úÖ Info obtida com: ${config.name}`);
                break;
            } catch (error: any) {
                console.error(`‚ùå Falha ao obter info com ${config.name}:`, error?.message || error);
                lastError = error;
                continue;
            }
        }

        if (!videoInfo) {
            console.error('‚ùå Todas as tentativas de obter info falharam');
            return NextResponse.json({
                error: 'N√£o foi poss√≠vel obter informa√ß√µes do v√≠deo. Tente novamente.'
            }, { status: 400 });
        }

        // Verificar dura√ß√£o (limite de 10 minutos = 600 segundos)
        const duration = parseInt(videoInfo.videoDetails.lengthSeconds);
        if (duration > 600) {
            return NextResponse.json({
                error: 'Este v√≠deo tem mais de 10 minutos. Esta ferramenta √© destinada apenas para m√∫sicas normais. Para arquivos longos (sets, compila√ß√µes), recomendamos o uso do Allavsoft.'
            }, { status: 400 });
        }

        return NextResponse.json({
            title: videoInfo.videoDetails.title,
            duration: videoInfo.videoDetails.lengthSeconds,
            thumbnail: videoInfo.videoDetails.thumbnails[0]?.url,
            author: videoInfo.videoDetails.author.name,
            viewCount: videoInfo.videoDetails.viewCount,
            isValid: true
        });

    } catch (error) {
        console.error('Erro ao obter informa√ß√µes do v√≠deo:', error);
        return NextResponse.json({
            error: 'Erro ao obter informa√ß√µes do v√≠deo'
        }, { status: 500 });
    }
}

// Fun√ß√£o para verificar o bitrate real do arquivo MP3 gerado
async function verifyActualBitrate(filePath: string, expectedQuality: string): Promise<void> {
    try {
        const ffmpegPath = getFFmpegPath();
        if (!ffmpegPath) {
            console.warn('‚ö†Ô∏è FFmpeg n√£o dispon√≠vel para verificar bitrate');
            return;
        }

        const ffprobe = spawn(ffmpegPath.replace('ffmpeg', 'ffprobe'), [
            '-v', 'quiet',
            '-show_entries', 'stream=bit_rate',
            '-select_streams', 'a:0',
            '-of', 'csv=p=0',
            filePath
        ]);

        let output = '';
        ffprobe.stdout.on('data', (data) => {
            output += data.toString();
        });

        ffprobe.on('close', (code) => {
            if (code === 0 && output.trim()) {
                const actualBitrateKbps = Math.round(parseInt(output.trim()) / 1000);
                console.log(`üìä Bitrate real do arquivo: ${actualBitrateKbps} kbps (esperado: ${expectedQuality} kbps)`);

                if (Math.abs(actualBitrateKbps - parseInt(expectedQuality)) > 50) {
                    console.warn(`‚ö†Ô∏è Aviso: Bitrate real (${actualBitrateKbps}) difere significativamente do esperado (${expectedQuality})`);
                }
            }
        });

        ffprobe.on('error', (error) => {
            console.warn('‚ö†Ô∏è N√£o foi poss√≠vel verificar bitrate:', error.message);
        });

    } catch (error) {
        console.warn('‚ö†Ô∏è Erro na verifica√ß√£o de bitrate:', error);
    }
}
