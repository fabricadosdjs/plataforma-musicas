// API para importa√ß√£o inteligente com busca de metadados e integra√ß√£o Spotify
import { ContaboStorage } from '@/lib/contabo-storage';
import { MusicStyleDetector } from '@/lib/music-style-detector';
import prisma from '@/lib/prisma';
import { NextRequest, NextResponse } from 'next/server';


interface TrackMetadata {
    artist: string;
    title: string;
    style: string;
    version: string;
    year?: number;
    bpm?: number;
    key?: string;
    genre?: string;
    confidence: number;
    spotifyData?: {
        spotifyId: string;
        album: string;
        releaseDate: string;
        imageUrl: string | null;
        previewUrl: string | null;
        spotifyUrl: string;
        popularity: number;
        durationMs: number;
    };
}

interface SpotifyMetadata {
    spotifyId: string;
    title: string;
    artist: string;
    album: string;
    releaseDate: string;
    imageUrl: string | null;
    previewUrl: string | null;
    spotifyUrl: string;
    popularity: number;
    durationMs: number;
}

// Fun√ß√£o para buscar metadados online (simula√ß√£o - voc√™ pode integrar com APIs reais)
async function fetchMetadataFromInternet(artist: string, title: string): Promise<Partial<TrackMetadata>> {
    try {
        // Simula√ß√£o de busca de metadados (substitua por APIs reais como Last.fm, Discogs, etc.)
        const mockResponse = await simulateMetadataAPI(artist, title);
        return mockResponse;
    } catch (error) {
        console.log('Erro ao buscar metadados online:', error);
        return {};
    }
}

// Simula√ß√£o de API de metadados (substitua por APIs reais)
async function simulateMetadataAPI(artist: string, title: string): Promise<Partial<TrackMetadata>> {
    // Simular delay de API
    await new Promise(resolve => setTimeout(resolve, 100));

    // Usar o detector inteligente
    const styleDetection = MusicStyleDetector.detectStyle(artist, title);

    return {
        style: styleDetection.style,
        bpm: styleDetection.bpm,
        key: styleDetection.key,
        year: new Date().getFullYear(),
        confidence: styleDetection.confidence,
        genre: styleDetection.subgenre
    };
}// Fun√ß√£o para an√°lise inteligente do nome do arquivo
function parseAudioFileNameAdvanced(filename: string): TrackMetadata {
    // Remover extens√£o
    const nameWithoutExt = filename.replace(/\.(mp3|wav|flac|m4a|aac|ogg)$/i, '');

    let artist = 'Unknown Artist';
    let title = nameWithoutExt;
    let version = 'Original';
    let extractedStyle = '';
    let cleanName = nameWithoutExt;

    // Primeiro, tentar extrair estilo expl√≠cito do nome da faixa
    const stylePatterns = [
        'progressive house', 'future house', 'deep house', 'tech house', 'tribal house',
        'big room', 'progressive', 'trance', 'techno', 'electro', 'dubstep', 'drum bass',
        'sertanejo', 'mpb', 'forr√≥', 'funk', 'pagode', 'bossa nova', 'ax√©', 'arrocha',
        'house', 'electronic', 'dance', 'edm', 'ambient', 'minimal'
    ];

    // Procurar por estilos no nome do arquivo
    const lowerFilename = nameWithoutExt.toLowerCase();
    for (const style of stylePatterns) {
        if (lowerFilename.includes(style.toLowerCase())) {
            // Capitalizar o estilo encontrado
            extractedStyle = style.split(' ')
                .map(word => word.charAt(0).toUpperCase() + word.slice(1))
                .join(' ');

            // Remover o estilo do nome do arquivo para n√£o aparecer no t√≠tulo
            const styleRegex = new RegExp(`\\s*${style.replace(/\s+/g, '\\s+')}\\s*`, 'gi');
            cleanName = nameWithoutExt.replace(styleRegex, ' ').trim();
            break;
        }
    }

    // Detectar e extrair sufixos comuns que devem ser removidos do t√≠tulo
    const suffixPatterns = [
        /\s*\(extended mix\)/gi,
        /\s*\(radio edit\)/gi,
        /\s*\(club mix\)/gi,
        /\s*\(vocal mix\)/gi,
        /\s*\(instrumental\)/gi,
        /\s*\(dub mix\)/gi,
        /\s*\(vip mix\)/gi,
        /\s*\(acoustic\)/gi,
        /\s*\(remix\)/gi,
        /\s*\(original mix\)/gi,
        /\s*\(official\)/gi,
        /\s*\(preview\)/gi,
        /\s*\(clean\)/gi,
        /\s*\(dirty\)/gi,
        /\s*\(explicit\)/gi
    ];

    let detectedSuffix = '';

    // Extrair sufixos e vers√µes
    for (const pattern of suffixPatterns) {
        const match = cleanName.match(pattern);
        if (match) {
            detectedSuffix = match[0].trim().replace(/[()]/g, '');
            // Capitalizar o sufixo
            detectedSuffix = detectedSuffix.split(' ')
                .map(word => word.charAt(0).toUpperCase() + word.slice(1))
                .join(' ');
            cleanName = cleanName.replace(pattern, '').trim();
            break;
        }
    }

    // Padr√£o 1: Artista - T√≠tulo (Vers√£o)
    const pattern1 = cleanName.match(/^(.+?)\s*-\s*(.+?)\s*\((.+?)\).*$/);
    if (pattern1) {
        artist = pattern1[1].trim();
        title = pattern1[2].trim();
        version = pattern1[3].trim();
    }
    // Padr√£o 2: Artista - T√≠tulo
    else if (cleanName.includes(' - ')) {
        const parts = cleanName.split(' - ');
        artist = parts[0].trim();
        title = parts.slice(1).join(' - ').trim();

        // Extrair vers√£o se estiver no t√≠tulo
        const versionMatch = title.match(/\((.+?)\)$/);
        if (versionMatch) {
            version = versionMatch[1].trim();
            title = title.replace(/\s*\(.+?\)$/, '').trim();
        }
    }
    // Padr√£o 3: Artista_T√≠tulo
    else if (cleanName.includes('_') && !cleanName.includes(' ')) {
        const parts = cleanName.split('_');
        artist = parts[0].trim();
        title = parts.slice(1).join(' ').trim();
    }

    // Limpar caracteres especiais
    artist = artist.replace(/[\[\]]/g, '').trim();
    title = title.replace(/[\[\]]/g, '').trim();
    version = version.replace(/[\[\]]/g, '').trim();

    // Usar estilo extra√≠do da faixa ou detector inteligente como fallback
    let finalStyle = extractedStyle;
    if (!finalStyle) {
        const styleDetection = MusicStyleDetector.detectStyle(artist, title, filename);
        finalStyle = styleDetection.style;
    }

    // Usar sufixo detectado como vers√£o ou manter vers√£o existente
    const finalVersion = detectedSuffix || version || 'Original';

    return {
        artist,
        title,
        version: finalVersion,
        style: finalStyle,
        confidence: extractedStyle ? 1.0 : 0.7, // Alta confian√ßa se extra√≠do da faixa
        genre: finalStyle
    };
} export async function POST(request: NextRequest) {
    try {
        // Obter dados do corpo da requisi√ß√£o
        const body = await request.json().catch(() => ({}));
        const importDate = body.importDate ? new Date(body.importDate) : new Date();
        const tracksWithSpotify = body.tracks || [];
        const useSpotifyMetadata = body.useSpotifyMetadata || false;

        console.log(`üìÖ Data de importa√ß√£o definida como: ${importDate.toLocaleDateString()}`);
        console.log(`üéµ Usar metadados do Spotify: ${useSpotifyMetadata}`);
        console.log(`üìù Tracks com dados Spotify: ${tracksWithSpotify.length}`);

        const storage = new ContaboStorage({
            endpoint: process.env.CONTABO_ENDPOINT!,
            region: process.env.CONTABO_REGION!,
            accessKeyId: process.env.CONTABO_ACCESS_KEY!,
            secretAccessKey: process.env.CONTABO_SECRET_KEY!,
            bucketName: process.env.CONTABO_BUCKET_NAME!,
        });

        console.log('üîç Iniciando importa√ß√£o inteligente...');

        let filesToProcess;

        // Se recebeu tracks espec√≠ficos, usar esses
        if (tracksWithSpotify.length > 0) {
            // Usar tracks fornecidos pela interface
            filesToProcess = tracksWithSpotify.map((track: any) => ({
                filename: track.filename,
                url: track.url,
                size: track.size,
                lastModified: track.lastModified,
                spotifyMetadata: track.spotifyMetadata
            }));
            console.log(`üìÅ Processando ${filesToProcess.length} tracks selecionados`);
        } else {
            // Buscar arquivos de √°udio do Contabo (comportamento original)
            const audioFiles = await storage.listAudioFiles();
            console.log(`üìÅ Encontrados ${audioFiles.length} arquivos no Contabo`);

            // Verificar quais j√° existem no banco
            const existingTracks = await prisma.track.findMany({
                select: {
                    previewUrl: true,
                    downloadUrl: true,
                    songName: true,
                    artist: true
                }
            });

            const existingUrls = new Set([
                ...existingTracks.map(track => track.previewUrl),
                ...existingTracks.map(track => track.downloadUrl)
            ]);

            // Filtrar apenas arquivos novos
            filesToProcess = audioFiles.filter(file => !existingUrls.has(file.url));
            console.log(`‚≠ê Novos arquivos para processar: ${filesToProcess.length}`);
        }
        const audioFiles = await storage.listAudioFiles();
        console.log(`üìÅ Encontrados ${audioFiles.length} arquivos no Contabo`);

        // Verificar quais j√° existem no banco
        const existingTracks = await prisma.track.findMany({
            select: {
                previewUrl: true,
                downloadUrl: true,
                songName: true,
                artist: true
            }
        });

        const existingUrls = new Set([
            ...existingTracks.map(track => track.previewUrl),
            ...existingTracks.map(track => track.downloadUrl)
        ]);

        // Filtrar apenas arquivos novos
        const newFiles = audioFiles.filter(file => !existingUrls.has(file.url));
        console.log(`‚≠ê Novos arquivos para processar: ${newFiles.length}`);

        if (filesToProcess.length === 0) {
            return NextResponse.json({
                success: true,
                message: 'Nenhum arquivo novo encontrado',
                imported: 0,
                total: tracksWithSpotify.length || 0
            });
        }

        // Processar cada arquivo com an√°lise inteligente
        const processedTracks = [];

        for (const file of filesToProcess) {
            console.log(`üéµ Processando: ${file.filename}`);

            // An√°lise local do nome do arquivo
            const localMetadata = parseAudioFileNameAdvanced(file.filename);

            let finalMetadata: TrackMetadata;

            // Se tem dados do Spotify, usar esses dados
            if (useSpotifyMetadata && file.spotifyMetadata) {
                console.log(`üéµ Usando metadados do Spotify para: ${file.filename}`);

                finalMetadata = {
                    artist: file.spotifyMetadata.artist,
                    title: file.spotifyMetadata.title,
                    style: localMetadata.style, // Manter detec√ß√£o local do estilo
                    version: localMetadata.version,
                    confidence: 0.9, // Alta confian√ßa para dados do Spotify
                    spotifyData: {
                        spotifyId: file.spotifyMetadata.spotifyId,
                        album: file.spotifyMetadata.album,
                        releaseDate: file.spotifyMetadata.releaseDate,
                        imageUrl: file.spotifyMetadata.imageUrl,
                        previewUrl: file.spotifyMetadata.previewUrl,
                        spotifyUrl: file.spotifyMetadata.spotifyUrl,
                        popularity: file.spotifyMetadata.popularity,
                        durationMs: file.spotifyMetadata.durationMs
                    }
                };
            } else {
                // Usar an√°lise local + busca online (comportamento original)
                const onlineMetadata = await fetchMetadataFromInternet(
                    localMetadata.artist,
                    localMetadata.title
                );

                // Combinar metadados com prioridade para dados online quando dispon√≠veis
                finalMetadata = {
                    ...localMetadata,
                    ...onlineMetadata,
                    confidence: Math.max(localMetadata.confidence, onlineMetadata.confidence || 0)
                };
            }

            processedTracks.push({
                file,
                metadata: finalMetadata
            });
        }

        // Importar para o banco de dados
        const importedTracks = [];
        const duplicatesFound = [];

        for (const { file, metadata } of processedTracks) {
            try {
                // Verificar se j√° existe uma m√∫sica com o mesmo artista e t√≠tulo
                const existingTrack = await prisma.track.findFirst({
                    where: {
                        AND: [
                            {
                                artist: {
                                    equals: metadata.artist,
                                    mode: 'insensitive'
                                }
                            },
                            {
                                songName: {
                                    equals: metadata.title,
                                    mode: 'insensitive'
                                }
                            }
                        ]
                    }
                });

                if (existingTrack) {
                    console.log(`üîÑ Duplicata encontrada: ${metadata.artist} - ${metadata.title} (j√° existe como ID: ${existingTrack.id})`);
                    duplicatesFound.push({
                        filename: file.filename,
                        artist: metadata.artist,
                        title: metadata.title,
                        existingId: existingTrack.id
                    });
                    continue; // Pular esta m√∫sica e n√£o importar
                }

                const track = await prisma.track.create({
                    data: {
                        songName: metadata.title,
                        artist: metadata.artist,
                        style: metadata.style,
                        version: metadata.version || 'Original',
                        previewUrl: file.url,
                        downloadUrl: file.url,
                        imageUrl: metadata.spotifyData?.imageUrl ||
                            `https://via.placeholder.com/300x300/1a1a1a/white?text=${encodeURIComponent(metadata.artist)}`,
                        releaseDate: metadata.spotifyData?.releaseDate ?
                            new Date(metadata.spotifyData.releaseDate) : importDate,
                        createdAt: importDate,
                        updatedAt: new Date()
                    }
                });

                importedTracks.push({
                    ...track,
                    confidence: metadata.confidence
                });

                console.log(`‚úÖ Importado: ${metadata.artist} - ${metadata.title} (${metadata.style})`);

            } catch (error) {
                console.error(`‚ùå Erro ao importar ${file.filename}:`, error);
            }
        }

        // Estat√≠sticas finais
        const totalTracks = await prisma.track.count();
        const styleStats = await prisma.track.groupBy({
            by: ['style'],
            _count: true
        });

        return NextResponse.json({
            success: true,
            message: `Importa√ß√£o conclu√≠da! ${importedTracks.length} m√∫sicas adicionadas${duplicatesFound.length > 0 ? `, ${duplicatesFound.length} duplicatas ignoradas` : ''}`,
            imported: importedTracks.length,
            duplicates: duplicatesFound.length,
            total: audioFiles.length,
            newTracks: importedTracks,
            duplicatesFound: duplicatesFound,
            statistics: {
                totalInDatabase: totalTracks,
                byStyle: styleStats
            }
        });

    } catch (error) {
        console.error('Erro na importa√ß√£o inteligente:', error);
        return NextResponse.json({
            success: false,
            error: 'Erro interno do servidor',
            details: error instanceof Error ? error.message : 'Erro desconhecido'
        }, { status: 500 });
    }
}
