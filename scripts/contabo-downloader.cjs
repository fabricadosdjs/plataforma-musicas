#!/usr/bin/env node

/**
 * üéµ Contabo Music Downloader - Script Local (CommonJS)
 * 
 * Este script baixa m√∫sicas do Contabo e cria automaticamente
 * pastas organizadas por estilo no seu PC.
 * 
 * Como usar:
 * 1. Instale as depend√™ncias: npm install axios fs-extra
 * 2. Execute: node scripts/contabo-downloader.cjs
 * 3. Configure a pasta de destino e outras op√ß√µes
 */

const axios = require('axios');
const fs = require('fs-extra');
const path = require('path');
const readline = require('readline');

// Configura√ß√µes
const config = {
    apiUrl: 'http://localhost:3000/api',
    downloadDir: path.join(process.env.USERPROFILE || process.env.HOME, 'Downloads', 'MusicasContabo'),
    batchSize: 5,
    delayBetweenBatches: 2000,
    timeout: 30000,
    maxRetries: 3
};

// Interface para leitura de input
const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

// Fun√ß√£o para fazer perguntas
function askQuestion(question) {
    return new Promise((resolve) => {
        rl.question(question, resolve);
    });
}

// Fun√ß√£o para verificar se o usu√°rio est√° logado e √© VIP/Admin
async function checkUserAuth() {
    try {
        console.log('üîê Verificando autentica√ß√£o do usu√°rio...');

        // Verificar se existe um arquivo de sess√£o
        const sessionFile = path.join(__dirname, 'user-session.json');
        if (await fs.pathExists(sessionFile)) {
            const sessionData = await fs.readJson(sessionFile);
            const now = Date.now();

            // Verificar se a sess√£o ainda √© v√°lida (24 horas)
            if (sessionData.expiresAt > now) {
                console.log('‚úÖ Sess√£o v√°lida encontrada!');
                return {
                    isAuthenticated: true,
                    user: sessionData.user,
                    isVip: sessionData.user.isVip || sessionData.user.isAdmin,
                    isAdmin: sessionData.user.isAdmin
                };
            }
        }

        // Se n√£o h√° sess√£o v√°lida, solicitar login
        console.log('‚ùå Nenhuma sess√£o v√°lida encontrada.');
        console.log('üîë Por favor, fa√ßa login na plataforma web primeiro.');

        const email = await askQuestion('üìß Digite seu email: ');
        const password = await askQuestion('üîí Digite sua senha: ');

        // Tentar fazer login via API
        const loginResponse = await axios.post(`${config.apiUrl}/auth/login`, {
            email,
            password
        }, { timeout: config.timeout });

        if (loginResponse.data.success) {
            const user = loginResponse.data.user;
            const isVip = user.isVip || user.isAdmin;

            if (!isVip) {
                console.log('‚ùå Acesso negado! Voc√™ precisa ser VIP ou Admin para usar este script.');
                return { isAuthenticated: false };
            }

            // Salvar sess√£o
            const sessionData = {
                user,
                expiresAt: now + (24 * 60 * 60 * 1000) // 24 horas
            };
            await fs.writeJson(sessionFile, sessionData, { spaces: 2 });

            console.log(`‚úÖ Login realizado com sucesso! Ol√°, ${user.name || user.email}`);
            console.log(`üëë Status: ${user.isAdmin ? 'Admin' : 'VIP'}`);

            return {
                isAuthenticated: true,
                user,
                isVip,
                isAdmin: user.isAdmin
            };
        } else {
            console.log('‚ùå Falha no login. Verifique suas credenciais.');
            return { isAuthenticated: false };
        }

    } catch (error) {
        console.log('‚ùå Erro ao verificar autentica√ß√£o:', error.message);
        console.log('üí° Certifique-se de que a plataforma web est√° rodando em http://localhost:3000');
        return { isAuthenticated: false };
    }
}

// Fun√ß√£o para baixar uma m√∫sica individual
async function downloadTrack(track, downloadDir) {
    try {
        const fileName = `${track.title} - ${track.artist}.mp3`;
        const filePath = path.join(downloadDir, fileName);

        // Verificar se o arquivo j√° existe
        if (await fs.pathExists(filePath)) {
            const stats = await fs.stat(filePath);
            if (stats.size > 1000) { // Arquivo maior que 1KB
                console.log(`‚è≠Ô∏è  ${fileName} j√° existe, pulando...`);
                return { success: true, skipped: true, fileName };
            }
        }

        console.log(`‚¨áÔ∏è  Baixando: ${fileName}`);

        const response = await axios({
            method: 'GET',
            url: `${config.apiUrl}/admin/download-track`,
            params: { trackId: track.id },
            responseType: 'stream',
            timeout: config.timeout
        });

        const writer = fs.createWriteStream(filePath);
        response.data.pipe(writer);

        return new Promise((resolve, reject) => {
            writer.on('finish', () => {
                console.log(`‚úÖ ${fileName} baixado com sucesso!`);
                resolve({ success: true, skipped: false, fileName });
            });
            writer.on('error', reject);
        });

    } catch (error) {
        console.log(`‚ùå Erro ao baixar ${track.title}:`, error.message);
        return { success: false, error: error.message };
    }
}

// Fun√ß√£o para baixar m√∫sicas de um estilo espec√≠fico
async function downloadStyleTracks(style, tracks, downloadDir) {
    const styleDir = path.join(downloadDir, style.toUpperCase());
    await fs.ensureDir(styleDir);

    console.log(`\nüéµ Baixando ${tracks.length} m√∫sicas do estilo: ${style.toUpperCase()}`);
    console.log(`üìÅ Pasta: ${styleDir}`);

    let successCount = 0;
    let skipCount = 0;
    let errorCount = 0;

    // Baixar em lotes
    for (let i = 0; i < tracks.length; i += config.batchSize) {
        const batch = tracks.slice(i, i + config.batchSize);
        console.log(`\nüì¶ Processando lote ${Math.floor(i / config.batchSize) + 1}/${Math.ceil(tracks.length / config.batchSize)}`);

        const batchPromises = batch.map(track => downloadTrack(track, styleDir));
        const batchResults = await Promise.all(batchPromises);

        batchResults.forEach(result => {
            if (result.success) {
                if (result.skipped) {
                    skipCount++;
                } else {
                    successCount++;
                }
            } else {
                errorCount++;
            }
        });

        // Aguardar entre lotes
        if (i + config.batchSize < tracks.length) {
            console.log(`‚è≥ Aguardando ${config.delayBetweenBatches / 1000}s antes do pr√≥ximo lote...`);
            await new Promise(resolve => setTimeout(resolve, config.delayBetweenBatches));
        }
    }

    console.log(`\nüìä Resumo do estilo ${style.toUpperCase()}:`);
    console.log(`‚úÖ Baixados: ${successCount}`);
    console.log(`‚è≠Ô∏è  Pulados: ${skipCount}`);
    console.log(`‚ùå Erros: ${errorCount}`);

    return { successCount, skipCount, errorCount };
}

// Fun√ß√£o para baixar m√∫sicas de um estilo espec√≠fico em pasta personalizada
async function downloadStyleTracksCustom(style, tracks, customDownloadDir) {
    const styleDir = path.join(customDownloadDir, style.toUpperCase());
    await fs.ensureDir(styleDir);

    console.log(`\nüéµ Baixando ${tracks.length} m√∫sicas do estilo: ${style.toUpperCase()}`);
    console.log(`üìÅ Pasta: ${styleDir}`);

    let successCount = 0;
    let skipCount = 0;
    let errorCount = 0;

    // Baixar em lotes
    for (let i = 0; i < tracks.length; i += config.batchSize) {
        const batch = tracks.slice(i, i + config.batchSize);
        console.log(`\nüì¶ Processando lote ${Math.floor(i / config.batchSize) + 1}/${Math.ceil(tracks.length / config.batchSize)}`);

        const batchPromises = batch.map(track => downloadTrack(track, styleDir));
        const batchResults = await Promise.all(batchPromises);

        batchResults.forEach(result => {
            if (result.success) {
                if (result.skipped) {
                    skipCount++;
                } else {
                    successCount++;
                }
            } else {
                errorCount++;
            }
        });

        // Aguardar entre lotes
        if (i + config.batchSize < tracks.length) {
            console.log(`‚è≥ Aguardando ${config.delayBetweenBatches / 1000}s antes do pr√≥ximo lote...`);
            await new Promise(resolve => setTimeout(resolve, config.delayBetweenBatches));
        }
    }

    console.log(`\nüìä Resumo do estilo ${style.toUpperCase()}:`);
    console.log(`‚úÖ Baixados: ${successCount}`);
    console.log(`‚è≠Ô∏è  Pulados: ${skipCount}`);
    console.log(`‚ùå Erros: ${errorCount}`);

    return { successCount, skipCount, errorCount };
}

// Fun√ß√£o principal
async function main() {
    try {
        console.log('üéµ Extrator de M√∫sicas Contabo - Script Local');
        console.log('='.repeat(50));

        // Verificar autentica√ß√£o
        const auth = await checkUserAuth();
        if (!auth.isAuthenticated) {
            console.log('\n‚ùå Falha na autentica√ß√£o. Encerrando...');
            rl.close();
            return;
        }

        console.log('\nüìã Escolha uma op√ß√£o:');
        console.log('1. Baixar m√∫sicas de um estilo espec√≠fico');
        console.log('2. Baixar todos os estilos');
        console.log('3. Sair');

        const choice = await askQuestion('\nüî¢ Digite sua escolha (1-3): ');

        if (choice === '1') {
            // Buscar estilos dispon√≠veis
            const stylesResponse = await axios.get(`${config.apiUrl}/admin/tracks-by-style`);
            const styles = Object.keys(stylesResponse.data);

            console.log('\nüé≠ Estilos dispon√≠veis:');
            styles.forEach((style, index) => {
                const count = stylesResponse.data[style].length;
                console.log(`${index + 1}. ${style.toUpperCase()} (${count} m√∫sicas)`);
            });

            const styleChoice = await askQuestion('\nüéµ Escolha o estilo (n√∫mero): ');
            const styleIndex = parseInt(styleChoice) - 1;

            if (styleIndex >= 0 && styleIndex < styles.length) {
                const selectedStyle = styles[styleIndex];
                const tracks = stylesResponse.data[selectedStyle];

                await downloadStyleTracks(selectedStyle, tracks, config.downloadDir);
            } else {
                console.log('‚ùå Op√ß√£o inv√°lida!');
            }

        } else if (choice === '2') {
            console.log('\nüìÅ Escolha a pasta de destino:');
            console.log('1. Pasta padr√£o (Downloads/MusicasContabo)');
            console.log('2. Pasta personalizada');

            const folderChoice = await askQuestion('\nüìÇ Digite sua escolha (1-2): ');

            let downloadDir = config.downloadDir;

            if (folderChoice === '2') {
                const customPath = await askQuestion('üìÅ Digite o caminho completo da pasta: ');
                downloadDir = customPath.trim();

                // Verificar se a pasta existe ou pode ser criada
                try {
                    await fs.ensureDir(downloadDir);
                    console.log(`‚úÖ Pasta configurada: ${downloadDir}`);
                } catch (error) {
                    console.log(`‚ùå Erro ao criar/acessar a pasta: ${error.message}`);
                    rl.close();
                    return;
                }
            }

            // Buscar todos os estilos
            const stylesResponse = await axios.get(`${config.apiUrl}/admin/tracks-by-style`);
            const styles = Object.keys(stylesResponse.data);

            console.log(`\nüöÄ Iniciando download de ${styles.length} estilos...`);
            console.log(`üìÅ Pasta de destino: ${downloadDir}`);

            let totalSuccess = 0;
            let totalSkip = 0;
            let totalError = 0;

            for (const style of styles) {
                const tracks = stylesResponse.data[style];
                const result = await downloadStyleTracksCustom(style, tracks, downloadDir);

                totalSuccess += result.successCount;
                totalSkip += result.skipCount;
                totalError += result.errorCount;

                // Aguardar entre estilos
                if (style !== styles[styles.length - 1]) {
                    console.log(`\n‚è≥ Aguardando 3s antes do pr√≥ximo estilo...`);
                    await new Promise(resolve => setTimeout(resolve, 3000));
                }
            }

            console.log('\nüéâ Download conclu√≠do!');
            console.log('='.repeat(50));
            console.log(`üìä Resumo Geral:`);
            console.log(`‚úÖ Total baixados: ${totalSuccess}`);
            console.log(`‚è≠Ô∏è  Total pulados: ${totalSkip}`);
            console.log(`‚ùå Total erros: ${totalError}`);
            console.log(`üìÅ M√∫sicas organizadas em: ${downloadDir}`);

        } else if (choice === '3') {
            console.log('üëã At√© logo!');
        } else {
            console.log('‚ùå Op√ß√£o inv√°lida!');
        }

    } catch (error) {
        console.log('‚ùå Erro:', error.message);
    } finally {
        rl.close();
    }
}

// Executar se for o arquivo principal
if (require.main === module) {
    main().catch(console.error);
}

module.exports = { downloadStyleTracks, downloadStyleTracksCustom, downloadTrack };
