# Script PowerShell para remover TODAS as m√∫sicas do banco de dados
# ‚ö†Ô∏è ATEN√á√ÉO: Este script √© DESTRUTIVO e ir√° remover TODAS as m√∫sicas!
#
# Uso:
# .\scripts\clear-tracks.ps1
#
# Par√¢metros:
# -Confirm:$false  : Executa sem confirma√ß√£o
# -Backup          : Cria backup antes de remover
# -DryRun          : Mostra o que seria removido sem executar

param(
    [switch]$Confirm = $true,
    [switch]$Backup,
    [switch]$DryRun
)

# Configura√ß√µes
$ErrorActionPreference = "Stop"
$ProgressPreference = "SilentlyContinue"

# Fun√ß√£o para mostrar cabe√ßalho
function Show-Header {
    Write-Host "üö® SCRIPT DE REMO√á√ÉO DE M√öSICAS üö®" -ForegroundColor Red
    Write-Host "=====================================" -ForegroundColor Red
    Write-Host "‚ö†Ô∏è  ATEN√á√ÉO: Este script ir√° remover TODAS as m√∫sicas do banco!" -ForegroundColor Yellow
    Write-Host "=====================================" -ForegroundColor Red
    Write-Host ""
}

# Fun√ß√£o para verificar se o Node.js est√° instalado
function Test-NodeJS {
    try {
        $nodeVersion = node --version 2>$null
        if ($LASTEXITCODE -eq 0) {
            Write-Host "‚úÖ Node.js encontrado: $nodeVersion" -ForegroundColor Green
            return $true
        }
    } catch {
        Write-Host "‚ùå Node.js n√£o encontrado" -ForegroundColor Red
        return $false
    }
    return $false
}

# Fun√ß√£o para verificar se o Prisma est√° dispon√≠vel
function Test-Prisma {
    try {
        $prismaVersion = npx prisma --version 2>$null
        if ($LASTEXITCODE -eq 0) {
            Write-Host "‚úÖ Prisma encontrado: $prismaVersion" -ForegroundColor Green
            return $true
        }
    } catch {
        Write-Host "‚ùå Prisma n√£o encontrado" -ForegroundColor Red
        return $false
    }
    return $false
}

# Fun√ß√£o para criar backup
function New-TracksBackup {
    Write-Host "üì¶ Criando backup das m√∫sicas..." -ForegroundColor Cyan
    
    try {
        # Criar diret√≥rio de backup se n√£o existir
        $backupDir = Join-Path $PSScriptRoot "..\backups"
        if (!(Test-Path $backupDir)) {
            New-Item -ItemType Directory -Path $backupDir -Force | Out-Null
        }
        
        # Nome do arquivo de backup com timestamp
        $timestamp = Get-Date -Format "yyyy-MM-dd_HH-mm-ss"
        $backupFile = Join-Path $backupDir "tracks-backup-$timestamp.json"
        
        # Executar script de backup via Node.js
        $backupScript = @"
const { PrismaClient } = require('@prisma/client');
const fs = require('fs');

const prisma = new PrismaClient();

async function backupTracks() {
    try {
        const tracks = await prisma.track.findMany({
            select: {
                id: true,
                songName: true,
                artist: true,
                style: true,
                version: true,
                pool: true,
                releaseDate: true,
                downloadUrl: true,
                previewUrl: true,
                imageUrl: true,
                bitrate: true,
                releaseId: true,
                folder: true,
                filename: true,
                isCommunity: true,
                uploadedBy: true,
                aiMeta: true,
                createdAt: true,
                updatedAt: true
            }
        });
        
        fs.writeFileSync('$backupFile', JSON.stringify(tracks, null, 2));
        console.log('BACKUP_SUCCESS:' + tracks.length);
    } catch (error) {
        console.error('BACKUP_ERROR:' + error.message);
        process.exit(1);
    } finally {
        await prisma.\$disconnect();
    }
}

backupTracks();
"@
        
        # Salvar script tempor√°rio
        $tempScript = Join-Path $env:TEMP "backup-tracks.js"
        $backupScript | Out-File -FilePath $tempScript -Encoding UTF8
        
        # Executar script
        $result = node $tempScript 2>&1
        
        # Limpar arquivo tempor√°rio
        Remove-Item $tempScript -Force
        
        if ($result -match "BACKUP_SUCCESS:(\d+)") {
            $count = $matches[1]
            Write-Host "‚úÖ Backup criado com sucesso: $backupFile" -ForegroundColor Green
            Write-Host "üìä Total de m√∫sicas no backup: $count" -ForegroundColor Green
            return $backupFile
        } elseif ($result -match "BACKUP_ERROR:(.+)") {
            $error = $matches[1]
            throw "Erro ao criar backup: $error"
        } else {
            throw "Erro desconhecido ao criar backup"
        }
        
    } catch {
        Write-Host "‚ùå Erro ao criar backup: $_" -ForegroundColor Red
        throw $_
    }
}

# Fun√ß√£o para contar m√∫sicas
function Get-TracksCount {
    try {
        $countScript = @"
const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function countTracks() {
    try {
        const count = await prisma.track.count();
        console.log('COUNT:' + count);
    } catch (error) {
        console.error('ERROR:' + error.message);
        process.exit(1);
    } finally {
        await prisma.\$disconnect();
    }
}

countTracks();
"@
        
        $tempScript = Join-Path $env:TEMP "count-tracks.js"
        $countScript | Out-File -FilePath $tempScript -Encoding UTF8
        
        $result = node $tempScript 2>&1
        
        Remove-Item $tempScript -Force
        
        if ($result -match "COUNT:(\d+)") {
            return [int]$matches[1]
        } else {
            throw "Erro ao contar m√∫sicas"
        }
        
    } catch {
        Write-Host "‚ùå Erro ao contar m√∫sicas: $_" -ForegroundColor Red
        return 0
    }
}

# Fun√ß√£o para remover m√∫sicas
function Remove-AllTracks {
    try {
        Write-Host "üóëÔ∏è  Removendo todas as m√∫sicas..." -ForegroundColor Red
        
        $deleteScript = @"
const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function deleteAllTracks() {
    try {
        const result = await prisma.track.deleteMany({});
        console.log('DELETE_SUCCESS:' + result.count);
    } catch (error) {
        console.error('DELETE_ERROR:' + error.message);
        process.exit(1);
    } finally {
        await prisma.\$disconnect();
    }
}

deleteAllTracks();
"@
        
        $tempScript = Join-Path $env:TEMP "delete-tracks.js"
        $deleteScript | Out-File -FilePath $tempScript -Encoding UTF8
        
        $result = node $tempScript 2>&1
        
        Remove-Item $tempScript -Force
        
        if ($result -match "DELETE_SUCCESS:(\d+)") {
            $count = $matches[1]
            Write-Host "‚úÖ Remo√ß√£o conclu√≠da com sucesso!" -ForegroundColor Green
            Write-Host "üìä M√∫sicas removidas: $count" -ForegroundColor Green
            return $count
        } elseif ($result -match "DELETE_ERROR:(.+)") {
            $error = $matches[1]
            throw "Erro ao remover m√∫sicas: $error"
        } else {
            throw "Erro desconhecido ao remover m√∫sicas"
        }
        
    } catch {
        Write-Host "‚ùå Erro durante a remo√ß√£o: $_" -ForegroundColor Red
        throw $_
    }
}

# Fun√ß√£o principal
function Main {
    try {
        Show-Header
        
        # Verificar configura√ß√µes
        Write-Host "üîß CONFIGURA√á√ïES:" -ForegroundColor Cyan
        Write-Host "  Confirma√ß√£o: $Confirm" -ForegroundColor White
        Write-Host "  Backup: $Backup" -ForegroundColor White
        Write-Host "  Modo dry-run: $DryRun" -ForegroundColor White
        Write-Host ""
        
        # Verificar depend√™ncias
        if (!(Test-NodeJS)) {
            Write-Host "‚ùå Node.js √© necess√°rio para executar este script" -ForegroundColor Red
            exit 1
        }
        
        if (!(Test-Prisma)) {
            Write-Host "‚ùå Prisma √© necess√°rio para executar este script" -ForegroundColor Red
            exit 1
        }
        
        # Contar m√∫sicas atuais
        $currentCount = Get-TracksCount
        Write-Host "üìä Total de m√∫sicas no banco: $currentCount" -ForegroundColor Yellow
        
        if ($currentCount -eq 0) {
            Write-Host "‚ÑπÔ∏è  Nenhuma m√∫sica encontrada para remover" -ForegroundColor Blue
            return
        }
        
        # Modo dry-run
        if ($DryRun) {
            Write-Host "üîç MODO DRY-RUN: Nenhuma m√∫sica ser√° removida" -ForegroundColor Yellow
            return
        }
        
        # Confirma√ß√£o do usu√°rio
        if ($Confirm) {
            Write-Host "‚ö†Ô∏è  ATEN√á√ÉO: Esta a√ß√£o √© IRREVERS√çVEL!" -ForegroundColor Red
            Write-Host "   Todas as m√∫sicas ser√£o perdidas permanentemente." -ForegroundColor Red
            Write-Host ""
            
            $answer = Read-Host "ü§î Tem certeza que deseja continuar? (digite 'SIM' para confirmar)"
            
            if ($answer -ne "SIM") {
                Write-Host "‚ùå Opera√ß√£o cancelada pelo usu√°rio" -ForegroundColor Yellow
                return
            }
            
            $finalAnswer = Read-Host "üö® √öLTIMA CHANCE: Digite 'REMOVER TUDO' para confirmar"
            
            if ($finalAnswer -ne "REMOVER TUDO") {
                Write-Host "‚ùå Opera√ß√£o cancelada pelo usu√°rio" -ForegroundColor Yellow
                return
            }
        }
        
        # Criar backup se solicitado
        $backupFile = $null
        if ($Backup) {
            $backupFile = New-TracksBackup
        }
        
        # Executar remo√ß√£o
        $removedCount = Remove-AllTracks
        
        # Verificar resultado
        $finalCount = Get-TracksCount
        Write-Host "üìä M√∫sicas restantes: $finalCount" -ForegroundColor Yellow
        
        if ($finalCount -eq 0) {
            Write-Host "üéâ Todas as m√∫sicas foram removidas com sucesso!" -ForegroundColor Green
        } else {
            Write-Host "‚ö†Ô∏è  Algumas m√∫sicas ainda permanecem no banco" -ForegroundColor Yellow
        }
        
        if ($backupFile) {
            Write-Host "üíæ Backup salvo em: $backupFile" -ForegroundColor Green
        }
        
    } catch {
        Write-Host "‚ùå Erro fatal: $_" -ForegroundColor Red
        exit 1
    }
}

# Executar fun√ß√£o principal
Main
