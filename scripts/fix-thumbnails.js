#!/usr/bin/env node

/**
 * Script para corrigir thumbnails das m√∫sicas
 * 
 * Este script atualiza todas as m√∫sicas que n√£o t√™m thumbnail
 * com uma imagem padr√£o.
 * 
 * Uso:
 * node scripts/fix-thumbnails.js
 * 
 * Ou para executar com Node.js:
 * npm run fix-thumbnails
 */

const DEFAULT_THUMBNAIL = 'https://i.ibb.co/yB0w9yFx/20250526-1940-Capa-Eletr-nica-Sound-Cloud-remix-01jw7c19d3eee9dqwv0m1x642z.png';

// Fun√ß√£o para atualizar thumbnail de uma m√∫sica
async function updateTrackThumbnail(trackId, imageUrl) {
    try {
        const response = await fetch('/api/admin/update-track-thumbnail', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                trackId,
                imageUrl
            }),
        });

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const result = await response.json();
        return result;
    } catch (error) {
        console.error(`‚ùå Erro ao atualizar m√∫sica ${trackId}:`, error);
        return null;
    }
}

// Fun√ß√£o para atualizar m√∫ltiplas m√∫sicas em lote
async function updateMultipleTrackThumbnails(trackIds, imageUrl) {
    try {
        const response = await fetch('/api/admin/update-track-thumbnail', {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                trackIds,
                imageUrl
            }),
        });

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const result = await response.json();
        return result;
    } catch (error) {
        console.error('‚ùå Erro ao atualizar m√∫sicas em lote:', error);
        return null;
    }
}

// Fun√ß√£o para obter todas as m√∫sicas (simulada)
async function getAllTracks() {
    try {
        // Aqui voc√™ pode implementar a l√≥gica para buscar todas as m√∫sicas
        // Por enquanto, vamos simular com IDs de exemplo
        const response = await fetch('/api/admin/tracks');

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const tracks = await response.json();
        return tracks;
    } catch (error) {
        console.error('‚ùå Erro ao buscar m√∫sicas:', error);
        // Retornar array vazio em caso de erro
        return [];
    }
}

// Fun√ß√£o principal para corrigir thumbnails
async function fixThumbnails() {
    console.log('üéµ Iniciando corre√ß√£o de thumbnails...');
    console.log(`üì∏ Usando imagem padr√£o: ${DEFAULT_THUMBNAIL}`);

    try {
        // Obter todas as m√∫sicas
        const tracks = await getAllTracks();

        if (tracks.length === 0) {
            console.log('‚ö†Ô∏è Nenhuma m√∫sica encontrada');
            return;
        }

        console.log(`üìä Total de m√∫sicas encontradas: ${tracks.length}`);

        // Filtrar m√∫sicas sem thumbnail
        const tracksWithoutThumbnail = tracks.filter(track =>
            !track.imageUrl ||
            track.imageUrl === '' ||
            track.imageUrl === null ||
            track.imageUrl === 'undefined'
        );

        console.log(`üîç M√∫sicas sem thumbnail: ${tracksWithoutThumbnail.length}`);

        if (tracksWithoutThumbnail.length === 0) {
            console.log('‚úÖ Todas as m√∫sicas j√° t√™m thumbnail!');
            return;
        }

        // Atualizar em lotes de 10
        const batchSize = 10;
        const batches = [];

        for (let i = 0; i < tracksWithoutThumbnail.length; i += batchSize) {
            batches.push(tracksWithoutThumbnail.slice(i, i + batchSize));
        }

        console.log(`üì¶ Processando em ${batches.length} lotes de ${batchSize}`);

        let totalUpdated = 0;
        let totalErrors = 0;

        for (let i = 0; i < batches.length; i++) {
            const batch = batches[i];
            console.log(`\nüì¶ Processando lote ${i + 1}/${batches.length} (${batch.length} m√∫sicas)`);

            const trackIds = batch.map(track => track.id);

            try {
                const result = await updateMultipleTrackThumbnails(trackIds, DEFAULT_THUMBNAIL);

                if (result && result.success) {
                    console.log(`‚úÖ Lote ${i + 1} atualizado com sucesso`);
                    totalUpdated += batch.length;
                } else {
                    console.log(`‚ùå Erro no lote ${i + 1}`);
                    totalErrors += batch.length;
                }
            } catch (error) {
                console.error(`‚ùå Erro no lote ${i + 1}:`, error);
                totalErrors += batch.length;
            }

            // Aguardar um pouco entre os lotes para n√£o sobrecarregar o servidor
            if (i < batches.length - 1) {
                console.log('‚è≥ Aguardando 1 segundo...');
                await new Promise(resolve => setTimeout(resolve, 1000));
            }
        }

        // Resumo final
        console.log('\nüìä RESUMO FINAL:');
        console.log(`‚úÖ Total atualizado: ${totalUpdated}`);
        console.log(`‚ùå Total com erro: ${totalErrors}`);
        console.log(`üì∏ Thumbnail padr√£o aplicada: ${DEFAULT_THUMBNAIL}`);

        if (totalUpdated > 0) {
            console.log('\nüéâ Corre√ß√£o de thumbnails conclu√≠da com sucesso!');
        } else {
            console.log('\n‚ö†Ô∏è Nenhuma thumbnail foi atualizada');
        }

    } catch (error) {
        console.error('‚ùå Erro durante a corre√ß√£o de thumbnails:', error);
    }
}

// Fun√ß√£o para corrigir thumbnail de uma m√∫sica espec√≠fica
async function fixSingleTrackThumbnail(trackId) {
    console.log(`üéµ Corrigindo thumbnail da m√∫sica ${trackId}...`);

    try {
        const result = await updateTrackThumbnail(trackId, DEFAULT_THUMBNAIL);

        if (result && result.success) {
            console.log(`‚úÖ Thumbnail da m√∫sica ${trackId} atualizada com sucesso!`);
            console.log(`üì∏ Nova imagem: ${DEFAULT_THUMBNAIL}`);
        } else {
            console.log(`‚ùå Falha ao atualizar m√∫sica ${trackId}`);
        }
    } catch (error) {
        console.error(`‚ùå Erro ao corrigir m√∫sica ${trackId}:`, error);
    }
}

// Verificar argumentos da linha de comando
const args = process.argv.slice(2);

if (args.length > 0) {
    const trackId = parseInt(args[0]);

    if (isNaN(trackId)) {
        console.log('‚ùå ID da m√∫sica deve ser um n√∫mero');
        console.log('Uso: node scripts/fix-thumbnails.js [trackId]');
        process.exit(1);
    }

    // Corrigir m√∫sica espec√≠fica
    fixSingleTrackThumbnail(trackId);
} else {
    // Corrigir todas as m√∫sicas
    fixThumbnails();
}

// Exportar fun√ß√µes para uso em outros scripts
module.exports = {
    fixThumbnails,
    fixSingleTrackThumbnail,
    updateTrackThumbnail,
    updateMultipleTrackThumbnails,
    DEFAULT_THUMBNAIL
};
