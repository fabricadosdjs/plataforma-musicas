import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function removeIbizaSessions2025() {
    try {
        console.log('üîç Buscando m√∫sicas do folder "Ibiza Sessions 2025"...');

        // 1. Primeiro, vamos ver quantas m√∫sicas existem com esse folder
        const tracksToDelete = await prisma.track.findMany({
            where: {
                folder: 'Ibiza Sessions 2025'
            },
            select: {
                id: true,
                songName: true,
                artist: true,
                folder: true,
                createdAt: true
            }
        });

        console.log(`üìä Encontradas ${tracksToDelete.length} m√∫sicas para remover:`);

        if (tracksToDelete.length === 0) {
            console.log('‚úÖ Nenhuma m√∫sica encontrada com o folder "Ibiza Sessions 2025"');
            return;
        }

        // Mostrar as m√∫sicas que ser√£o removidas
        tracksToDelete.forEach((track, index) => {
            console.log(`${index + 1}. ID: ${track.id} - "${track.songName}" by ${track.artist} (${track.createdAt})`);
        });

        // 2. Confirmar a remo√ß√£o (em produ√ß√£o, voc√™ pode querer adicionar uma confirma√ß√£o manual)
        console.log('\n‚ö†Ô∏è ATEN√á√ÉO: Esta opera√ß√£o ir√° REMOVER PERMANENTEMENTE todas essas m√∫sicas!');
        console.log('üíæ Fazendo backup das informa√ß√µes antes da remo√ß√£o...');

        // 3. Fazer backup das m√∫sicas antes de remover
        const backupData = {
            timestamp: new Date().toISOString(),
            folder: 'Ibiza Sessions 2025',
            removedTracks: tracksToDelete,
            totalCount: tracksToDelete.length
        };

        // Salvar backup em arquivo JSON
        const fs = await import('fs');
        const backupFilename = `backup-ibiza-sessions-2025-${new Date().toISOString().split('T')[0]}.json`;
        fs.writeFileSync(backupFilename, JSON.stringify(backupData, null, 2));
        console.log(`üíæ Backup salvo em: ${backupFilename}`);

        // 4. Remover as m√∫sicas relacionadas primeiro (downloads, likes, plays, etc.)
        console.log('\nüßπ Removendo dados relacionados...');

        // Remover downloads relacionados
        const deletedDownloads = await prisma.download.deleteMany({
            where: {
                trackId: {
                    in: tracksToDelete.map(track => track.id)
                }
            }
        });
        console.log(`‚úÖ Removidos ${deletedDownloads.count} downloads relacionados`);

        // Remover likes relacionados
        const deletedLikes = await prisma.like.deleteMany({
            where: {
                trackId: {
                    in: tracksToDelete.map(track => track.id)
                }
            }
        });
        console.log(`‚úÖ Removidos ${deletedLikes.count} likes relacionados`);

        // Remover plays relacionados
        const deletedPlays = await prisma.play.deleteMany({
            where: {
                trackId: {
                    in: tracksToDelete.map(track => track.id)
                }
            }
        });
        console.log(`‚úÖ Removidos ${deletedPlays.count} plays relacionados`);

        // Remover requests relacionados
        const deletedRequests = await prisma.request.deleteMany({
            where: {
                trackId: {
                    in: tracksToDelete.map(track => track.id)
                }
            }
        });
        console.log(`‚úÖ Removidos ${deletedRequests.count} requests relacionados`);

        // 5. Finalmente, remover as m√∫sicas
        console.log('\nüóëÔ∏è Removendo as m√∫sicas...');
        const deletedTracks = await prisma.track.deleteMany({
            where: {
                folder: 'Ibiza Sessions 2025'
            }
        });

        console.log(`‚úÖ Removidas ${deletedTracks.count} m√∫sicas do folder "Ibiza Sessions 2025"`);

        // 6. Verificar se a remo√ß√£o foi bem-sucedida
        const remainingTracks = await prisma.track.count({
            where: {
                folder: 'Ibiza Sessions 2025'
            }
        });

        if (remainingTracks === 0) {
            console.log('‚úÖ Todas as m√∫sicas foram removidas com sucesso!');
        } else {
            console.log(`‚ö†Ô∏è Ainda restam ${remainingTracks} m√∫sicas. Algo pode ter dado errado.`);
        }

        console.log('\nüìä Resumo da opera√ß√£o:');
        console.log(`- M√∫sicas removidas: ${deletedTracks.count}`);
        console.log(`- Downloads removidos: ${deletedDownloads.count}`);
        console.log(`- Likes removidos: ${deletedLikes.count}`);
        console.log(`- Plays removidos: ${deletedPlays.count}`);
        console.log(`- Requests removidos: ${deletedRequests.count}`);
        console.log(`- Backup salvo em: ${backupFilename}`);

    } catch (error) {
        console.error('‚ùå Erro durante a remo√ß√£o:', error);

        if (error instanceof Error) {
            console.error('üîç Detalhes do erro:', {
                message: error.message,
                stack: error.stack
            });
        }

        throw error;
    } finally {
        await prisma.$disconnect();
    }
}

// Executar o script
removeIbizaSessions2025()
    .then(() => {
        console.log('\n‚úÖ Script executado com sucesso!');
        process.exit(0);
    })
    .catch((error) => {
        console.error('\n‚ùå Script falhou:', error);
        process.exit(1);
    });
