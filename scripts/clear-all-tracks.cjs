#!/usr/bin/env node

/**
 * Script para remover TODAS as m√∫sicas do banco de dados
 * ‚ö†Ô∏è ATEN√á√ÉO: Este script √© DESTRUTIVO e ir√° remover TODAS as m√∫sicas!
 * 
 * Uso:
 * node scripts/clear-all-tracks.js
 * 
 * Op√ß√µes:
 * --confirm: Confirma a execu√ß√£o sem perguntar
 * --backup: Cria um backup antes de remover
 * --dry-run: Mostra o que seria removido sem executar
 * --force: For√ßa a execu√ß√£o mesmo com erros
 */

const { PrismaClient } = require('@prisma/client');
const fs = require('fs');
const path = require('path');
const readline = require('readline');

// Configura√ß√£o do Prisma
const prisma = new PrismaClient();

// Configura√ß√µes do script
const config = {
    confirm: process.argv.includes('--confirm'),
    backup: process.argv.includes('--backup'),
    dryRun: process.argv.includes('--dry-run'),
    force: process.argv.includes('--force')
};

// Interface para leitura de input
const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

// Fun√ß√£o para perguntar ao usu√°rio
function askQuestion(question) {
    return new Promise((resolve) => {
        rl.question(question, (answer) => {
            resolve(answer.toLowerCase());
        });
    });
}

// Fun√ß√£o para criar backup
async function createBackup() {
    try {
        console.log('üì¶ Criando backup das m√∫sicas...');

        // Buscar todas as m√∫sicas
        const tracks = await prisma.track.findMany({
            select: {
                id: true,
                songName: true,
                artist: true,
                style: true,
                version: true,
                pool: true,
                releaseDate: true,
                downloadUrl: true,
                previewUrl: true,
                imageUrl: true,
                bitrate: true,
                releaseId: true,
                folder: true,
                filename: true,
                isCommunity: true,
                uploadedBy: true,
                aiMeta: true,
                createdAt: true,
                updatedAt: true
            }
        });

        if (tracks.length === 0) {
            console.log('‚ÑπÔ∏è  Nenhuma m√∫sica encontrada para backup');
            return;
        }

        // Criar nome do arquivo com timestamp
        const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
        const backupDir = path.join(__dirname, '..', 'backups');
        const backupFile = path.join(backupDir, `tracks-backup-${timestamp}.json`);

        // Criar diret√≥rio de backup se n√£o existir
        if (!fs.existsSync(backupDir)) {
            fs.mkdirSync(backupDir, { recursive: true });
        }

        // Salvar backup
        fs.writeFileSync(backupFile, JSON.stringify(tracks, null, 2));

        console.log(`‚úÖ Backup criado com sucesso: ${backupFile}`);
        console.log(`üìä Total de m√∫sicas no backup: ${tracks.length}`);

        return backupFile;
    } catch (error) {
        console.error('‚ùå Erro ao criar backup:', error);
        if (!config.force) {
            throw error;
        }
        return null;
    }
}

// Fun√ß√£o para contar m√∫sicas
async function countTracks() {
    try {
        const count = await prisma.track.count();
        return count;
    } catch (error) {
        console.error('‚ùå Erro ao contar m√∫sicas:', error);
        return 0;
    }
}

// Fun√ß√£o para mostrar estat√≠sticas
async function showStats() {
    try {
        console.log('\nüìä ESTAT√çSTICAS ATUAIS:');
        console.log('========================');

        const totalTracks = await prisma.track.count();
        console.log(`Total de m√∫sicas: ${totalTracks}`);

        if (totalTracks > 0) {
            // Estat√≠sticas por estilo (style)
            const styleStats = await prisma.track.groupBy({
                by: ['style'],
                _count: {
                    style: true
                },
                orderBy: {
                    _count: {
                        style: 'desc'
                    }
                },
                take: 10
            });

            console.log('\nTop 10 estilos:');
            styleStats.forEach(stat => {
                console.log(`  ${stat.style || 'Sem estilo'}: ${stat._count.style}`);
            });

            // Estat√≠sticas por artista
            const artistStats = await prisma.track.groupBy({
                by: ['artist'],
                _count: {
                    artist: true
                },
                orderBy: {
                    _count: {
                        artist: 'desc'
                    }
                },
                take: 10
            });

            console.log('\nTop 10 artistas:');
            artistStats.forEach(stat => {
                console.log(`  ${stat.artist || 'Sem artista'}: ${stat._count.artist}`);
            });
        }

        console.log('========================\n');
    } catch (error) {
        console.error('‚ùå Erro ao mostrar estat√≠sticas:', error);
    }
}

// Fun√ß√£o para executar a remo√ß√£o
async function clearAllTracks() {
    try {
        console.log('üóëÔ∏è  Iniciando remo√ß√£o de todas as m√∫sicas...');

        if (config.dryRun) {
            console.log('üîç MODO DRY-RUN: Nenhuma m√∫sica ser√° removida');
            await showStats();
            return;
        }

        // Contar m√∫sicas antes da remo√ß√£o
        const initialCount = await countTracks();
        console.log(`üìä Total de m√∫sicas a serem removidas: ${initialCount}`);

        if (initialCount === 0) {
            console.log('‚ÑπÔ∏è  Nenhuma m√∫sica encontrada para remover');
            return;
        }

        // Criar backup se solicitado
        let backupFile = null;
        if (config.backup) {
            backupFile = await createBackup();
        }

        // Executar remo√ß√£o
        console.log('üóëÔ∏è  Removendo m√∫sicas...');
        const result = await prisma.track.deleteMany({});

        console.log(`‚úÖ Remo√ß√£o conclu√≠da com sucesso!`);
        console.log(`üìä M√∫sicas removidas: ${result.count}`);

        if (backupFile) {
            console.log(`üíæ Backup salvo em: ${backupFile}`);
        }

        // Verificar se todas foram removidas
        const finalCount = await countTracks();
        console.log(`üìä M√∫sicas restantes: ${finalCount}`);

        if (finalCount === 0) {
            console.log('üéâ Todas as m√∫sicas foram removidas com sucesso!');
        } else {
            console.log('‚ö†Ô∏è  Algumas m√∫sicas ainda permanecem no banco');
        }

    } catch (error) {
        console.error('‚ùå Erro durante a remo√ß√£o:', error);

        if (!config.force) {
            console.log('\nüí° Dica: Use --force para continuar mesmo com erros');
            process.exit(1);
        }
    }
}

// Fun√ß√£o principal
async function main() {
    try {
        console.log('üö® SCRIPT DE REMO√á√ÉO DE M√öSICAS üö®');
        console.log('=====================================');
        console.log('‚ö†Ô∏è  ATEN√á√ÉO: Este script ir√° remover TODAS as m√∫sicas do banco!');
        console.log('=====================================\n');

        // Mostrar configura√ß√µes
        console.log('üîß CONFIGURA√á√ïES:');
        console.log(`  Confirma√ß√£o autom√°tica: ${config.confirm ? 'Sim' : 'N√£o'}`);
        console.log(`  Backup: ${config.backup ? 'Sim' : 'N√£o'}`);
        console.log(`  Modo dry-run: ${config.dryRun ? 'Sim' : 'N√£o'}`);
        console.log(`  For√ßar execu√ß√£o: ${config.force ? 'Sim' : 'N√£o'}`);
        console.log('');

        // Mostrar estat√≠sticas atuais
        await showStats();

        // Confirma√ß√£o do usu√°rio
        if (!config.confirm) {
            console.log('‚ö†Ô∏è  ATEN√á√ÉO: Esta a√ß√£o √© IRREVERS√çVEL!');
            console.log('   Todas as m√∫sicas ser√£o perdidas permanentemente.');

            const answer = await askQuestion('ü§î Tem certeza que deseja continuar? (digite "SIM" para confirmar): ');

            if (answer !== 'sim') {
                console.log('‚ùå Opera√ß√£o cancelada pelo usu√°rio');
                process.exit(0);
            }

            // Confirma√ß√£o adicional
            const finalAnswer = await askQuestion('üö® √öLTIMA CHANCE: Digite "REMOVER TUDO" para confirmar: ');

            if (finalAnswer !== 'remover tudo') {
                console.log('‚ùå Opera√ß√£o cancelada pelo usu√°rio');
                process.exit(0);
            }
        }

        // Executar remo√ß√£o
        await clearAllTracks();

        console.log('\n‚úÖ Script executado com sucesso!');

    } catch (error) {
        console.error('‚ùå Erro fatal:', error);
        process.exit(1);
    } finally {
        await prisma.$disconnect();
        rl.close();
    }
}

// Tratamento de erros n√£o capturados
process.on('unhandledRejection', (reason, promise) => {
    console.error('‚ùå Promessa rejeitada n√£o tratada:', reason);
    process.exit(1);
});

process.on('uncaughtException', (error) => {
    console.error('‚ùå Exce√ß√£o n√£o capturada:', error);
    process.exit(1);
});

// Executar script
if (require.main === module) {
    main();
}

module.exports = { clearAllTracks, createBackup, countTracks };
