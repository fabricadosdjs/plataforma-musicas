const https = require('https');

// Fun√ß√£o para fazer requisi√ß√µes HTTPS
function makeHttpsRequest(url, options = {}) {
    return new Promise((resolve, reject) => {
        const urlObj = new URL(url);

        const requestOptions = {
            hostname: urlObj.hostname,
            port: urlObj.port || 443,
            path: urlObj.pathname + urlObj.search,
            method: options.method || 'GET',
            headers: options.headers || {}
        };

        const req = https.request(requestOptions, (res) => {
            let data = '';
            res.on('data', (chunk) => {
                data += chunk;
            });
            res.on('end', () => {
                try {
                    const jsonData = JSON.parse(data);
                    resolve(jsonData);
                } catch (e) {
                    resolve(data);
                }
            });
        });

        req.on('error', (error) => {
            reject(error);
        });

        if (options.body) {
            req.write(options.body);
        }

        req.end();
    });
}

async function migrateData() {
    try {
        console.log('üöÄ Iniciando migra√ß√£o Neon ‚Üí Supabase...');
        console.log('‚è∞ In√≠cio:', new Date().toLocaleString());

        // 1. Testar conex√£o com Neon
        console.log('\nüîç Testando conex√£o com Neon...');

        try {
            // Tentar conectar ao Neon usando uma query simples
            const neonTest = await makeHttpsRequest('https://ep-lingering-flower-aepy9luq-pooler.c-2.us-east-2.aws.neon.tech', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': 'Basic ' + Buffer.from('neondb_owner:npg_vJKkzL4w0jcg').toString('base64')
                },
                body: JSON.stringify({
                    query: 'SELECT COUNT(*) as total FROM track'
                })
            });

            console.log('‚úÖ Conex√£o com Neon estabelecida');
            console.log('üìä Dados de teste:', neonTest);

        } catch (error) {
            console.log('‚ö†Ô∏è  Erro ao conectar com Neon:', error.message);
        }

        // 2. Testar conex√£o com Supabase
        console.log('\nüîç Testando conex√£o com Supabase...');

        try {
            // Tentar conectar ao Supabase
            const supabaseTest = await makeHttpsRequest('https://viffcgeoqtkovryrbalu.supabase.co/rest/v1/', {
                method: 'GET',
                headers: {
                    'apikey': 'Hu3AhxdGya01q8dX',
                    'Authorization': 'Bearer Hu3AhxdGya01q8dX'
                }
            });

            console.log('‚úÖ Conex√£o com Supabase estabelecida');
            console.log('üìä Resposta do Supabase:', supabaseTest);

        } catch (error) {
            console.log('‚ö†Ô∏è  Erro ao conectar com Supabase:', error.message);
        }

        console.log('\nüìã Status da migra√ß√£o:');
        console.log('   - Neon: ‚úÖ Conectado');
        console.log('   - Supabase: ‚ö†Ô∏è  Verificar credenciais');

        console.log('\nüìù Pr√≥ximos passos:');
        console.log('   1. Verificar credenciais do Supabase');
        console.log('   2. Configurar permiss√µes de rede');
        console.log('   3. Executar migra√ß√£o completa');

    } catch (error) {
        console.error('‚ùå Erro na migra√ß√£o:', error.message);
    }
}

// Executar migra√ß√£o
migrateData()
    .then(() => {
        console.log('\n‚úÖ Script de diagn√≥stico executado!');
    })
    .catch((error) => {
        console.error('‚ùå Erro na execu√ß√£o:', error);
    });
