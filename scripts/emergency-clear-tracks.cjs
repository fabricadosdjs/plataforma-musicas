#!/usr/bin/env node

/**
 * Script de EMERG√äNCIA para remover TODAS as m√∫sicas
 * ‚ö†Ô∏è ATEN√á√ÉO: Este script √© DESTRUTIVO e ir√° remover TODAS as m√∫sicas!
 * 
 * Uso:
 * node scripts/emergency-clear-tracks.js
 */

const { PrismaClient } = require('@prisma/client');

// Configura√ß√£o do Prisma
const prisma = new PrismaClient();

async function emergencyClearTracks() {
    try {
        console.log('üö® SCRIPT DE EMERG√äNCIA - REMO√á√ÉO DE M√öSICAS üö®');
        console.log('==================================================');
        console.log('‚ö†Ô∏è  ATEN√á√ÉO: Este script ir√° remover TODAS as m√∫sicas!');
        console.log('==================================================\n');

        // Contar m√∫sicas atuais
        const count = await prisma.track.count();
        console.log(`üìä Total de m√∫sicas no banco: ${count}`);

        if (count === 0) {
            console.log('‚ÑπÔ∏è  Nenhuma m√∫sica encontrada para remover');
            return;
        }

        // Confirma√ß√£o final
        console.log('\nüö® √öLTIMA CHANCE:');
        console.log('   Digite "EMERGENCIA" para confirmar a remo√ß√£o de TODAS as m√∫sicas:');

        const readline = require('readline');
        const rl = readline.createInterface({
            input: process.stdin,
            output: process.stdout
        });

        const answer = await new Promise((resolve) => {
            rl.question('Confirma√ß√£o: ', resolve);
        });

        rl.close();

        if (answer !== 'EMERGENCIA') {
            console.log('‚ùå Opera√ß√£o cancelada');
            return;
        }

        // Executar remo√ß√£o
        console.log('\nüóëÔ∏è  Removendo todas as m√∫sicas...');
        const result = await prisma.track.deleteMany({});

        console.log(`‚úÖ Remo√ß√£o conclu√≠da!`);
        console.log(`üìä M√∫sicas removidas: ${result.count}`);

        // Verificar resultado
        const finalCount = await prisma.track.count();
        console.log(`üìä M√∫sicas restantes: ${finalCount}`);

    } catch (error) {
        console.error('‚ùå Erro durante a remo√ß√£o:', error);
        throw error;
    } finally {
        await prisma.$disconnect();
    }
}

// Executar se chamado diretamente
if (require.main === module) {
    emergencyClearTracks()
        .then(() => {
            console.log('\n‚úÖ Script executado com sucesso!');
            process.exit(0);
        })
        .catch((error) => {
            console.error('\n‚ùå Erro fatal:', error);
            process.exit(1);
        });
}

module.exports = { emergencyClearTracks };
