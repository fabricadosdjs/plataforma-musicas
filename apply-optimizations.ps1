# üöÄ Script de Aplica√ß√£o de Otimiza√ß√µes de Performance
# Plataforma de M√∫sicas - Nexor Records
# Vers√£o PowerShell para Windows

Write-Host "üéµ Aplicando otimiza√ß√µes de performance para a plataforma de m√∫sicas..." -ForegroundColor Green
Write-Host ""

# Verificar se estamos no diret√≥rio correto
if (-not (Test-Path "package.json")) {
    Write-Host "‚ùå Erro: Execute este script no diret√≥rio raiz do projeto" -ForegroundColor Red
    exit 1
}

Write-Host "üìÅ Diret√≥rio atual: $(Get-Location)" -ForegroundColor Cyan
Write-Host ""

# 1. Fazer backup da configura√ß√£o atual do Next.js
Write-Host "üîí Fazendo backup da configura√ß√£o atual..." -ForegroundColor Yellow
if (Test-Path "next.config.mjs") {
    Copy-Item "next.config.mjs" "next.config.backup.mjs"
    Write-Host "‚úÖ Backup criado: next.config.backup.mjs" -ForegroundColor Green
}
else {
    Write-Host "‚ö†Ô∏è Arquivo next.config.mjs n√£o encontrado" -ForegroundColor Yellow
}

# 2. Aplicar configura√ß√£o otimizada
Write-Host ""
Write-Host "‚ö° Aplicando configura√ß√£o otimizada do Next.js..." -ForegroundColor Yellow
if (Test-Path "next.config.optimized.mjs") {
    Copy-Item "next.config.optimized.mjs" "next.config.mjs"
    Write-Host "‚úÖ Configura√ß√£o otimizada aplicada" -ForegroundColor Green
}
else {
    Write-Host "‚ùå Arquivo next.config.optimized.mjs n√£o encontrado" -ForegroundColor Red
    exit 1
}

# 3. Instalar depend√™ncias necess√°rias
Write-Host ""
Write-Host "üì¶ Instalando depend√™ncias necess√°rias..." -ForegroundColor Yellow
try {
    npm install @svgr/webpack webpack-bundle-analyzer --save-dev
    Write-Host "‚úÖ Depend√™ncias instaladas com sucesso" -ForegroundColor Green
}
catch {
    Write-Host "‚ùå Erro ao instalar depend√™ncias" -ForegroundColor Red
    exit 1
}

# 4. Verificar se os hooks otimizados foram criados
Write-Host ""
Write-Host "üîç Verificando hooks otimizados..." -ForegroundColor Yellow
$hooksDir = "src/hooks"
$requiredHooks = @(
    "useOptimizedTracksFetch.ts",
    "useOptimizedDataFetch.ts",
    "useOptimizedNavigation.ts"
)

$missingHooks = $false
foreach ($hook in $requiredHooks) {
    if (Test-Path "$hooksDir/$hook") {
        Write-Host "‚úÖ $hook encontrado" -ForegroundColor Green
    }
    else {
        Write-Host "‚ùå $hook n√£o encontrado" -ForegroundColor Red
        $missingHooks = $true
    }
}

# 5. Verificar se os componentes otimizados foram criados
Write-Host ""
Write-Host "üîç Verificando componentes otimizados..." -ForegroundColor Yellow
$componentsDir = "src/components/music"
$requiredComponents = @(
    "OptimizedStyleCards.tsx",
    "OptimizedFolderCards.tsx",
    "OptimizedCommunityCarousel.tsx"
)

$missingComponents = $false
foreach ($component in $requiredComponents) {
    if (Test-Path "$componentsDir/$component") {
        Write-Host "‚úÖ $component encontrado" -ForegroundColor Green
    }
    else {
        Write-Host "‚ùå $component n√£o encontrado" -ForegroundColor Red
        $missingComponents = $true
    }
}

# 6. Verificar se a documenta√ß√£o foi criada
Write-Host ""
Write-Host "üìö Verificando documenta√ß√£o..." -ForegroundColor Yellow
if (Test-Path "OTIMIZACOES-PERFORMANCE.md") {
    Write-Host "‚úÖ Documenta√ß√£o criada: OTIMIZACOES-PERFORMANCE.md" -ForegroundColor Green
}
else {
    Write-Host "‚ùå Documenta√ß√£o n√£o encontrada" -ForegroundColor Red
}

# 7. Resumo final
Write-Host ""
Write-Host "üéâ Resumo da aplica√ß√£o das otimiza√ß√µes:" -ForegroundColor Green
Write-Host ""

if ($missingHooks -or $missingComponents) {
    Write-Host "‚ö†Ô∏è Alguns arquivos otimizados n√£o foram encontrados" -ForegroundColor Yellow
    Write-Host "   Verifique se todos os arquivos foram criados corretamente" -ForegroundColor Yellow
    Write-Host ""
    Write-Host "üìã Arquivos necess√°rios:" -ForegroundColor Cyan
    Write-Host "   - src/hooks/useOptimizedTracksFetch.ts"
    Write-Host "   - src/hooks/useOptimizedDataFetch.ts"
    Write-Host "   - src/hooks/useOptimizedNavigation.ts"
    Write-Host "   - src/components/music/OptimizedStyleCards.tsx"
    Write-Host "   - src/components/music/OptimizedFolderCards.tsx"
    Write-Host "   - src/components/music/OptimizedCommunityCarousel.tsx"
}
else {
    Write-Host "‚úÖ Todos os arquivos otimizados foram encontrados" -ForegroundColor Green
}

Write-Host ""
Write-Host "üîß Configura√ß√µes aplicadas:" -ForegroundColor Cyan
Write-Host "   - next.config.mjs otimizado"
Write-Host "   - Depend√™ncias instaladas"
Write-Host "   - Backup da configura√ß√£o anterior criado"

Write-Host ""
Write-Host "üìñ Pr√≥ximos passos:" -ForegroundColor Cyan
Write-Host "   1. Leia a documenta√ß√£o: OTIMIZACOES-PERFORMANCE.md"
Write-Host "   2. Substitua os hooks antigos pelos otimizados na p√°gina /new"
Write-Host "   3. Substitua os componentes antigos pelos otimizados"
Write-Host "   4. Teste a performance da navega√ß√£o"
Write-Host "   5. Execute 'npm run build' para verificar se n√£o h√° erros"

Write-Host ""
Write-Host "üöÄ Otimiza√ß√µes aplicadas com sucesso!" -ForegroundColor Green
Write-Host "   A performance da navega√ß√£o deve melhorar significativamente"
Write-Host ""

# 8. Opcional: Limpar arquivos tempor√°rios
Write-Host "üßπ Deseja limpar arquivos tempor√°rios? (y/n)" -ForegroundColor Yellow
$response = Read-Host
if ($response -eq "y" -or $response -eq "Y") {
    Write-Host "üóëÔ∏è Limpando arquivos tempor√°rios..." -ForegroundColor Yellow
    if (Test-Path "next.config.optimized.mjs") {
        Remove-Item "next.config.optimized.mjs"
        Write-Host "‚úÖ Arquivos tempor√°rios removidos" -ForegroundColor Green
    }
}

Write-Host ""
Write-Host "üéµ Otimiza√ß√µes conclu√≠das! Sua plataforma de m√∫sicas agora est√° mais r√°pida!" -ForegroundColor Green
