// Teste simples da conex√£o Contabo usando fetch diretamente
import { ListObjectsV2Command, S3Client } from '@aws-sdk/client-s3';
import dotenv from 'dotenv';

// Carregar vari√°veis de ambiente
dotenv.config({ path: '.env.local' });

async function testContaboSimple() {
    console.log('üîç Testando conex√£o com Contabo Object Storage...\n');

    try {
        // Configura√ß√£o do cliente S3
        const s3Client = new S3Client({
            endpoint: process.env.CONTABO_ENDPOINT || 'https://eu2.contabostorage.com',
            region: process.env.CONTABO_REGION || 'eu-central-1',
            credentials: {
                accessKeyId: process.env.CONTABO_ACCESS_KEY || '',
                secretAccessKey: process.env.CONTABO_SECRET_KEY || ''
            },
            forcePathStyle: true,
            apiVersion: '2006-03-01'
        });

        const bucketName = process.env.CONTABO_BUCKET_NAME || '';

        console.log('üìã Configura√ß√£o:');
        console.log(`   Endpoint: ${process.env.CONTABO_ENDPOINT}`);
        console.log(`   Regi√£o: ${process.env.CONTABO_REGION}`);
        console.log(`   Bucket: ${bucketName}`);
        console.log(`   Access Key: ${process.env.CONTABO_ACCESS_KEY?.substring(0, 8)}...`);

        // Teste 1: Listar objetos do bucket
        console.log('\nüìÅ Listando objetos do bucket...');

        const command = new ListObjectsV2Command({
            Bucket: bucketName,
            MaxKeys: 10
        });

        const response = await s3Client.send(command);

        console.log(`‚úÖ Sucesso! Conex√£o estabelecida!`);
        console.log(`üìä Encontrados ${response.KeyCount || 0} objetos`);

        if (response.Contents && response.Contents.length > 0) {
            console.log('\nüìã Primeiros arquivos encontrados:');
            response.Contents.slice(0, 5).forEach((obj, index) => {
                const sizeKB = (obj.Size / 1024).toFixed(1);
                console.log(`   ${index + 1}. ${obj.Key} (${sizeKB} KB)`);
            });

            // Contar arquivos de √°udio
            const audioFiles = response.Contents.filter(obj =>
                obj.Key.match(/\.(mp3|wav|flac|m4a|aac|ogg)$/i)
            );
            console.log(`\nüéµ Arquivos de √°udio: ${audioFiles.length}`);
        }

        console.log('\nüéâ TESTE CONCLU√çDO COM SUCESSO!');
        console.log('üí° Sua integra√ß√£o com o Contabo est√° funcionando!');
        console.log('üöÄ Pr√≥ximo passo: Execute "npm run contabo:import" para importar m√∫sicas');

    } catch (error) {
        console.error('\n‚ùå ERRO NA CONEX√ÉO:', error.message);

        if (error.message.includes('InvalidAccessKeyId')) {
            console.log('\nüîß PROBLEMA: Access Key inv√°lida');
            console.log('   Verifique se CONTABO_ACCESS_KEY est√° correto no .env.local');
        } else if (error.message.includes('SignatureDoesNotMatch')) {
            console.log('\nüîß PROBLEMA: Secret Key inv√°lida');
            console.log('   Verifique se CONTABO_SECRET_KEY est√° correto no .env.local');
        } else if (error.message.includes('NoSuchBucket')) {
            console.log('\nüîß PROBLEMA: Bucket n√£o encontrado');
            console.log('   Verifique se CONTABO_BUCKET_NAME est√° correto no .env.local');
        } else {
            console.log('\nüîß DICAS PARA RESOLVER:');
            console.log('   1. Verifique todas as credenciais no .env.local');
            console.log('   2. Confirme se o endpoint est√° correto para sua regi√£o');
            console.log('   3. Teste as credenciais no painel da Contabo');
        }
    }
}

testContaboSimple();
