const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function applyUploaderSimplifiedMigration() {
    try {
        console.log('üîÑ Aplicando migra√ß√£o simplificada dos uploaders...');

        // Remover campos antigos dos uploaders
        await prisma.$executeRaw`ALTER TABLE "User" DROP COLUMN IF EXISTS "uploaderLevel"`;
        await prisma.$executeRaw`ALTER TABLE "User" DROP COLUMN IF EXISTS "uploaderExpiration"`;
        await prisma.$executeRaw`ALTER TABLE "User" DROP COLUMN IF EXISTS "uploaderBenefits"`;
        await prisma.$executeRaw`ALTER TABLE "User" DROP COLUMN IF EXISTS "uploaderPlan"`;
        await prisma.$executeRaw`ALTER TABLE "User" DROP COLUMN IF EXISTS "uploaderPlanType"`;
        await prisma.$executeRaw`ALTER TABLE "User" DROP COLUMN IF EXISTS "uploaderExpirationDate"`;
        await prisma.$executeRaw`ALTER TABLE "User" DROP COLUMN IF EXISTS "uploaderMonthlyFee"`;
        await prisma.$executeRaw`ALTER TABLE "User" DROP COLUMN IF EXISTS "uploaderStatus"`;

        // Manter apenas o campo isUploader
        await prisma.$executeRaw`ALTER TABLE "User" ADD COLUMN IF NOT EXISTS "isUploader" BOOLEAN DEFAULT false`;

        // Remover √≠ndices antigos
        try {
            await prisma.$executeRaw`DROP INDEX IF EXISTS "idx_user_uploader"`;
        } catch (error) {
            console.log('√çndice anterior n√£o encontrado, continuando...');
        }

        try {
            await prisma.$executeRaw`DROP INDEX IF EXISTS "idx_user_uploader_plans"`;
        } catch (error) {
            console.log('√çndice uploader_plans n√£o encontrado, continuando...');
        }

        // Criar novo √≠ndice simplificado (se n√£o existir)
        try {
            await prisma.$executeRaw`CREATE INDEX "idx_user_uploader_simple" ON "User"("isUploader")`;
        } catch (error) {
            console.log('√çndice idx_user_uploader_simple j√° existe, continuando...');
        }

        // Atualizar usu√°rios existentes para remover dados antigos
        await prisma.user.updateMany({
            where: {
                isUploader: true
            },
            data: {
                isUploader: false // Reset para nova l√≥gica
            }
        });

        console.log(`‚úÖ Migra√ß√£o simplificada aplicada com sucesso!`);

        // Verificar usu√°rios existentes
        const totalUsers = await prisma.user.count();
        const uploaderCount = await prisma.user.count({
            where: { isUploader: true }
        });

        console.log(`üìà Total de usu√°rios: ${totalUsers}`);
        console.log(`üì§ Uploaders: ${uploaderCount}`);

    } catch (error) {
        console.error('‚ùå Erro ao aplicar migra√ß√£o:', error);
    } finally {
        await prisma.$disconnect();
    }
}

applyUploaderSimplifiedMigration(); 