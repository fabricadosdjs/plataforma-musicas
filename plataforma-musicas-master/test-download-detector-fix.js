// Teste da corre√ß√£o do DownloadExtensionDetector
const testDownloadDetectorFix = async () => {
    console.log('üß™ Testando corre√ß√£o do DownloadExtensionDetector...');

    try {
        // Teste 1: Verificar se o m√©todo detectExtensions funciona
        const { DownloadExtensionDetector } = await import('/src/utils/downloadDetector.ts');

        if (typeof DownloadExtensionDetector.detectExtensions === 'function') {
            console.log('‚úÖ M√©todo detectExtensions existe');

            // Teste 2: Verificar se n√£o h√° erros ao executar
            try {
                const extensions = DownloadExtensionDetector.detectExtensions();
                console.log('‚úÖ detectExtensions executou sem erros:', extensions);
            } catch (error) {
                console.log('‚ùå Erro ao executar detectExtensions:', error);
            }
        } else {
            console.log('‚ùå M√©todo detectExtensions n√£o existe');
        }

        // Teste 3: Verificar outros m√©todos
        if (typeof DownloadExtensionDetector.isDownloadExtensionActive === 'function') {
            console.log('‚úÖ M√©todo isDownloadExtensionActive existe');
        } else {
            console.log('‚ùå M√©todo isDownloadExtensionActive n√£o existe');
        }

        if (typeof DownloadExtensionDetector.getDetectedExtensions === 'function') {
            console.log('‚úÖ M√©todo getDetectedExtensions existe');
        } else {
            console.log('‚ùå M√©todo getDetectedExtensions n√£o existe');
        }

    } catch (error) {
        console.log('‚ùå Erro ao importar DownloadExtensionDetector:', error);
    }
};

// Executar teste se estiver no browser
if (typeof window !== 'undefined') {
    testDownloadDetectorFix();
} else {
    console.log('Script deve ser executado no browser');
} 