// test-reset-functionality.js
const { PrismaClient } = require('@prisma/client');

async function testResetFunctionality() {
    const prisma = new PrismaClient();

    try {
        console.log('üß™ Testando funcionalidade de reset...');

        const testUserId = '23f02c7e-c418-4650-9bf2-05ecdd607516';

        // 1. Definir alguns contadores para testar
        console.log('üìä Definindo contadores de teste...');
        await prisma.user.update({
            where: { id: testUserId },
            data: {
                dailyDownloadCount: 45,
                weeklyPackRequests: 8,
                weeklyPlaylistDownloads: 5
            }
        });

        const userBefore = await prisma.user.findUnique({
            where: { id: testUserId },
            select: {
                email: true,
                dailyDownloadCount: true,
                weeklyPackRequests: true,
                weeklyPlaylistDownloads: true
            }
        });

        console.log('‚úÖ Estado ANTES do reset:');
        console.log(`   Contador di√°rio: ${userBefore.dailyDownloadCount}`);
        console.log(`   Requisi√ß√µes semanais: ${userBefore.weeklyPackRequests}`);
        console.log(`   Downloads playlist: ${userBefore.weeklyPlaylistDownloads}`);

        // 2. Testar reset do contador di√°rio
        console.log('\nüîÑ Testando reset do contador di√°rio...');
        await prisma.user.update({
            where: { id: testUserId },
            data: {
                dailyDownloadCount: 0,
                lastDownloadReset: new Date()
            }
        });

        // 3. Testar reset dos contadores semanais
        console.log('üîÑ Testando reset dos contadores semanais...');
        await prisma.user.update({
            where: { id: testUserId },
            data: {
                weeklyPackRequests: 0,
                weeklyPlaylistDownloads: 0
            }
        });

        const userAfter = await prisma.user.findUnique({
            where: { id: testUserId },
            select: {
                email: true,
                dailyDownloadCount: true,
                weeklyPackRequests: true,
                weeklyPlaylistDownloads: true,
                lastDownloadReset: true
            }
        });

        console.log('\n‚úÖ Estado DEPOIS do reset:');
        console.log(`   Contador di√°rio: ${userAfter.dailyDownloadCount}`);
        console.log(`   Requisi√ß√µes semanais: ${userAfter.weeklyPackRequests}`);
        console.log(`   Downloads playlist: ${userAfter.weeklyPlaylistDownloads}`);
        console.log(`   √öltimo reset: ${userAfter.lastDownloadReset}`);

        // Verificar se o reset funcionou
        if (userAfter.dailyDownloadCount === 0 &&
            userAfter.weeklyPackRequests === 0 &&
            userAfter.weeklyPlaylistDownloads === 0) {
            console.log('\nüéâ Reset funcionando corretamente!');
        } else {
            console.log('\n‚ùå Reset n√£o funcionou como esperado');
        }

    } catch (error) {
        console.error('‚ùå Erro durante teste:', error);
    } finally {
        await prisma.$disconnect();
    }
}

testResetFunctionality();
