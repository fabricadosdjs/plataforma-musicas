// Script para reiniciar e verificar conex√£o com banco
import { PrismaClient } from '@prisma/client';
import dotenv from 'dotenv';

dotenv.config({ path: '.env.local' });

const prisma = new PrismaClient();

async function restartDatabase() {
    console.log('üîß Reiniciando conex√£o com banco de dados...\n');

    try {
        // 1. Desconectar inst√¢ncias existentes
        console.log('1Ô∏è‚É£ Desconectando inst√¢ncias existentes...');
        await prisma.$disconnect();

        // 2. Aguardar um momento
        await new Promise(resolve => setTimeout(resolve, 2000));

        // 3. Tentar conectar novamente
        console.log('2Ô∏è‚É£ Reconectando ao banco...');
        await prisma.$connect();

        // 4. Testar conectividade
        console.log('3Ô∏è‚É£ Testando conectividade...');
        const result = await prisma.$executeRaw`SELECT 1 as test`;
        console.log('‚úÖ Teste de conectividade passou:', result);

        // 5. Verificar se as tabelas existem
        console.log('4Ô∏è‚É£ Verificando tabelas...');
        const trackCount = await prisma.track.count();
        const userCount = await prisma.user.count();

        console.log(`üìä Tracks no banco: ${trackCount}`);
        console.log(`üë• Usu√°rios no banco: ${userCount}`);

        // 6. Teste de escrita (criar usu√°rio tempor√°rio)
        console.log('5Ô∏è‚É£ Testando escrita no banco...');

        const testUserId = `test-${Date.now()}`;

        try {
            const testUser = await prisma.user.create({
                data: {
                    id: testUserId,
                    email: 'test@example.com',
                    name: 'Test User',
                    dailyDownloadCount: 0,
                    lastDownloadReset: new Date(),
                }
            });

            console.log('‚úÖ Escrita funcionando - usu√°rio teste criado');

            // Remover usu√°rio teste
            await prisma.user.delete({
                where: { id: testUserId }
            });

            console.log('‚úÖ Limpeza conclu√≠da - usu√°rio teste removido');

        } catch (writeError) {
            console.error('‚ùå Erro na escrita:', writeError);
        }

        console.log('\nüéâ REINICIALIZA√á√ÉO CONCLU√çDA COM SUCESSO!');
        console.log('üí° O banco de dados est√° funcionando normalmente.');

    } catch (error) {
        console.error('\n‚ùå ERRO NA REINICIALIZA√á√ÉO:', error);
        console.log('\nüîß POSS√çVEIS SOLU√á√ïES:');
        console.log('1. Verificar se PostgreSQL est√° rodando');
        console.log('2. Verificar DATABASE_URL no .env.local');
        console.log('3. Executar: npx prisma db push');
        console.log('4. Verificar firewall/portas');
        console.log('5. Reiniciar PostgreSQL service');

        // Mostrar configura√ß√£o atual
        console.log('\nüìã CONFIGURA√á√ÉO ATUAL:');
        console.log('DATABASE_URL:', process.env.DATABASE_URL ? 'Definida' : '‚ùå N√£o definida');

    } finally {
        await prisma.$disconnect();
    }
}

restartDatabase();
