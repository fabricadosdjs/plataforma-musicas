// test-vip-promotion.js
const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function testVipPromotion() {
    try {
        console.log('üß™ TESTE DE PROMO√á√ÉO VIP');
        console.log('='.repeat(40));

        // 1. Listar todos os usu√°rios
        const allUsers = await prisma.user.findMany({
            select: {
                id: true,
                email: true,
                name: true,
                is_vip: true,
                createdAt: true
            }
        });

        console.log(`üë• Total de usu√°rios: ${allUsers.length}`);

        if (allUsers.length === 0) {
            console.log('‚ùå Nenhum usu√°rio encontrado!');
            console.log('üí° Crie um usu√°rio primeiro fazendo login na aplica√ß√£o.');
            return;
        }

        console.log('\nüìã LISTA DE USU√ÅRIOS:');
        allUsers.forEach((user, index) => {
            console.log(`${index + 1}. ${user.email}`);
            console.log(`   üë§ Nome: ${user.name || 'N√£o definido'}`);
            console.log(`   üëë VIP: ${user.is_vip ? 'SIM ‚úÖ' : 'N√ÉO ‚ùå'}`);
            console.log(`   üÜî ID: ${user.id}`);
            console.log(`   üìÖ Criado: ${user.createdAt}\n`);
        });

        // 2. Promover primeiro usu√°rio n√£o-VIP para VIP
        const nonVipUser = allUsers.find(user => !user.is_vip);

        if (nonVipUser) {
            console.log(`üöÄ PROMOVENDO USU√ÅRIO: ${nonVipUser.email}`);

            const updatedUser = await prisma.user.update({
                where: { id: nonVipUser.id },
                data: { is_vip: true }
            });

            console.log(`‚úÖ ${updatedUser.email} agora √© VIP!`);

            // Verificar se a altera√ß√£o foi salva
            const verification = await prisma.user.findUnique({
                where: { id: nonVipUser.id },
                select: { email: true, is_vip: true }
            });

            console.log(`üîç Verifica√ß√£o: ${verification.email} - VIP: ${verification.is_vip ? 'SIM ‚úÖ' : 'N√ÉO ‚ùå'}`);

        } else {
            console.log('‚ÑπÔ∏è  Todos os usu√°rios j√° s√£o VIP');

            // Mostrar como despromover se necess√°rio
            const vipUser = allUsers.find(user => user.is_vip);
            if (vipUser) {
                console.log(`\nüîÑ Para testar, posso despromover: ${vipUser.email}`);
                console.log('Digite "y" para despromover e testar novamente:');
            }
        }

        console.log('\nüìù PR√ìXIMOS PASSOS:');
        console.log('1. Fa√ßa login na aplica√ß√£o com um dos usu√°rios acima');
        console.log('2. V√° para /admin/users para ver a interface de promo√ß√£o');
        console.log('3. Teste o download de uma m√∫sica');
        console.log('4. Verifique os logs no console do navegador (F12)');

    } catch (error) {
        console.error('‚ùå Erro no teste:', error);
    } finally {
        await prisma.$disconnect();
    }
}

testVipPromotion();
