generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                          String         @id @default(cuid())
  email                       String         @unique
  name                        String?
  dailyDownloadCount          Int?           @default(0)
  lastDownloadReset           DateTime?
  createdAt                   DateTime       @default(now())
  updatedAt                   DateTime       @updatedAt
  is_vip                      Boolean?       @default(false)
  status                      String?        @default("ativo")
  valor                       Float?
  vencimento                  DateTime?
  customBenefits              Json?
  dataPagamento               DateTime?
  lastWeekReset               DateTime?
  weeklyPackRequests          Int?           @default(0)
  weeklyPlaylistDownloads     Int?           @default(0)
  weeklyPackRequestsUsed      Int?           @default(0)
  weeklyPlaylistDownloadsUsed Int?           @default(0)
  whatsapp                    String?
  deemix                      Boolean?       @default(false)
  deezerPremium               Boolean?       @default(false)
  deezerEmail                 String?
  deezerPassword              String?
  isPro                       Boolean?       @default(false)
  isAdmin                     Boolean?       @default(false)
  password                    String?
  isUploader                  Boolean?       @default(false)
  dataPrimeiroPagamento       DateTime?
  planName                    String?
  adminMessages               AdminMessage[]
  customItems                 CustomItem[]
  downloads                   Download[]
  likes                       Like[]
  plays                       Play[]
  uploadedTracks              Track[]
}

model Track {
  id          Int        @id @default(autoincrement())
  songName    String
  artist      String
  style       String
  version     String?
  pool        String?    @default("Nexor Records")
  imageUrl    String
  previewUrl  String
  downloadUrl String
  releaseDate DateTime
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  isCommunity Boolean    @default(false)
  uploadedBy  String?
  aiMeta      Json?
  downloads   Download[]
  likes       Like[]
  plays       Play[]
  uploader    User?      @relation(fields: [uploadedBy], references: [id])
}

model Like {
  id        Int      @id @default(autoincrement())
  trackId   Int
  userId    String
  createdAt DateTime @default(now())
  track     Track    @relation(fields: [trackId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, trackId])
}

model Download {
  id                  Int       @id @default(autoincrement())
  trackId             Int
  userId              String
  downloadedAt        DateTime  @default(now())
  createdAt           DateTime  @default(now())
  nextAllowedDownload DateTime?
  track               Track     @relation(fields: [trackId], references: [id], onDelete: Cascade)
  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, trackId])
}

model Play {
  id         Int      @id @default(autoincrement())
  trackId    Int
  userId     String
  duration   Int?
  completed  Boolean  @default(false)
  deviceInfo String?
  ipAddress  String?
  createdAt  DateTime @default(now())
  track      Track    @relation(fields: [trackId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([trackId])
  @@index([createdAt])
}

model CustomItem {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  type        String
  isActive    Boolean  @default(true)
  icon        String?
  color       String?
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String
  user        User     @relation(fields: [createdBy], references: [id], onDelete: Cascade)
}

model AdminMessage {
  id        Int      @id @default(autoincrement())
  title     String
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isActive  Boolean  @default(true)
  createdBy String
  user      User     @relation(fields: [createdBy], references: [id], onDelete: Cascade)
}
