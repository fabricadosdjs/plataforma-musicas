generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                          String     @id @default(cuid())
  email                       String     @unique
  name                        String?
  dailyDownloadCount          Int?       @default(0)
  lastDownloadReset           DateTime?
  createdAt                   DateTime   @default(now())
  updatedAt                   DateTime   @updatedAt
  is_vip                      Boolean?   @default(false)
  status                      String?    @default("ativo")
  valor                       Float?
  vencimento                  DateTime?
  customBenefits              Json?
  dataPagamento               DateTime?
  lastWeekReset               DateTime?
  weeklyPackRequests          Int?       @default(0)
  weeklyPlaylistDownloads     Int?       @default(0)
  weeklyPackRequestsUsed      Int?       @default(0)
  weeklyPlaylistDownloadsUsed Int?       @default(0)
  whatsapp                    String?
  deemix                      Boolean?   @default(false)
  deezerPremium               Boolean?   @default(false)
  deezerEmail                 String?
  deezerPassword              String?
  isPro                       Boolean?   @default(false)
  isAdmin                     Boolean?   @default(false)
  password                    String?
  isUploader                  Boolean?   @default(false)
  dataPrimeiroPagamento       DateTime?
  planName                    String?
  planType                    String?
  period                      String?
  downloads                   Download[]
  likes                       Like[]
  plays                       Play[]
  requests                    Request[]
}

model Track {
  id          Int        @id @default(autoincrement())
  songName    String
  artist      String
  style       String?
  version     String?
  pool        String?
  imageUrl    String?
  previewUrl  String?
  downloadUrl String?
  releaseDate DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  isCommunity Boolean?
  uploadedBy  String?
  aiMeta      Json?
  bitrate     Int?
  releaseId   Int?
  folder      String?    @db.VarChar(255)
  filename    String?
  downloads   Download[]
  likes       Like[]
  plays       Play[]
  requests    Request[]
  release     release?   @relation(fields: [releaseId], references: [id])

  @@index([filename])
  @@index([folder], map: "idx_track_folder")
}

model Request {
  id                  String    @id @default(cuid())
  songName            String
  artist              String
  genre               String?
  priority            Priority  @default(MEDIUM)
  status              Status    @default(PENDING)
  requestedBy         String
  requestedAt         DateTime  @default(now())
  notes               String?
  estimatedCompletion DateTime?
  completedAt         DateTime?
  completedBy         String?
  trackId             Int?
  user                User      @relation(fields: [requestedBy], references: [email])
  track               Track?    @relation(fields: [trackId], references: [id])
}

model Download {
  id           Int      @id @default(autoincrement())
  trackId      Int
  userId       String?
  downloadedAt DateTime @default(now())
  createdAt    DateTime @default(now())
  sessionId    String?
  source       String?
  timestamp    DateTime @default(now())
  updatedAt    DateTime @default(now())
  userAgent    String?
  track        Track    @relation(fields: [trackId], references: [id])
  user         User?    @relation(fields: [userId], references: [id])

  @@unique([userId, trackId])
}

model Like {
  id        Int      @id @default(autoincrement())
  trackId   Int
  userId    String
  createdAt DateTime @default(now())
  sessionId String?
  source    String?
  timestamp DateTime @default(now())
  updatedAt DateTime @default(now())
  userAgent String?
  track     Track    @relation(fields: [trackId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([trackId, userId])
}

model Play {
  id         Int      @id @default(autoincrement())
  trackId    Int
  userId     String?
  duration   Int?
  completed  Boolean  @default(false)
  deviceInfo String?
  ipAddress  String?
  createdAt  DateTime @default(now())
  sessionId  String?
  source     String?
  timestamp  DateTime @default(now())
  userAgent  String?
  track      Track    @relation(fields: [trackId], references: [id])
  user       User?    @relation(fields: [userId], references: [id])
}

model AdminMessage {
  id        Int      @id @default(autoincrement())
  title     String
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  isActive  Boolean  @default(true)
  createdBy String
}

model CustomItem {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  type        String
  isActive    Boolean  @default(true)
  icon        String?
  color       String?
  order       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  createdBy   String
}

model release {
  id          Int      @id @default(autoincrement())
  title       String
  artist      String
  albumArt    String
  description String?
  genre       String
  releaseDate DateTime
  trackCount  Int      @default(0)
  duration    String?
  label       String?
  producer    String?
  featured    Boolean  @default(false)
  exclusive   Boolean  @default(false)
  streaming   Json?
  social      Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  Track       Track[]
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum Status {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
  ON_HOLD
}
