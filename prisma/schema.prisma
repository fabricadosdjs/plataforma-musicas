// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Like {
  id        Int      @id @default(autoincrement())
  trackId   Int
  track     Track    @relation(fields: [trackId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, trackId])
}

model Download {
  id           Int      @id @default(autoincrement())
  trackId      Int
  track        Track    @relation(fields: [trackId], references: [id], onDelete: Cascade)
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  downloadedAt DateTime @default(now()) // <-- NOVO CAMPO: Registra a data e hora exata do download.
}

model User {
  id                 String    @id @unique
  email              String?   @unique
  name               String?
  
  // Novos campos para o limite de downloads diÃ¡rio
  dailyDownloadCount Int       @default(0)
  lastDownloadReset  DateTime?

  likes              Like[]
  downloads          Download[]

  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model Track {
  id          Int      @id @default(autoincrement())
  songName    String
  artist      String
  style       String
  version     String? // Tornamos 'version' opcional para flexibilidade
  imageUrl    String
  previewUrl  String
  downloadUrl String
  releaseDate DateTime

  likes       Like[]
  downloads   Download[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}