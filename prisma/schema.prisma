generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String     @id @default(cuid())
  email                   String     @unique
  name                    String?
  dailyDownloadCount      Int?       @default(0)
  lastDownloadReset       DateTime?
  createdAt               DateTime   @default(now())
  updatedAt               DateTime   @updatedAt
  is_vip                  Boolean?   @default(false)
  status                  String?    @default("ativo")
  valor                   Float?
  vencimento              DateTime?
  customBenefits          Json?
  dataPagamento           DateTime?
  lastWeekReset           DateTime?
  weeklyPackRequests      Int?       @default(0)
  weeklyPlaylistDownloads Int?       @default(0)
  whatsapp                String?
  deemix                  Boolean?   @default(false)
  isPro                   Boolean?   @default(false)
  password                String?
  downloads               Download[]
  likes                   Like[]
  plays                   Play[]
  uploadedTracks          Track[]    // Músicas enviadas pelo usuário
  customItems             CustomItem[] // Items personalizados criados pelo admin
}

model Track {
  id          Int        @id @default(autoincrement())
  songName    String
  artist      String
  style       String
  version     String?
  pool        String?    @default("Nexor Records")  // Pool da música
  imageUrl    String
  previewUrl  String
  downloadUrl String
  releaseDate DateTime
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  isCommunity Boolean    @default(false)  // Identifica se é música da comunidade
  uploadedBy  String?    // ID do usuário que enviou a música
  downloads   Download[]
  likes       Like[]
  plays       Play[]
  uploader    User?      @relation(fields: [uploadedBy], references: [id], onDelete: SetNull)
}

model Like {
  id        Int      @id @default(autoincrement())
  trackId   Int
  userId    String
  createdAt DateTime @default(now())
  track     Track    @relation(fields: [trackId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, trackId])
}

model Download {
  id                  Int       @id @default(autoincrement())
  trackId             Int
  userId              String
  downloadedAt        DateTime  @default(now())
  createdAt           DateTime  @default(now())
  nextAllowedDownload DateTime?
  track               Track     @relation(fields: [trackId], references: [id], onDelete: Cascade)
  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, trackId])
}

model Play {
  id         Int      @id @default(autoincrement())
  trackId    Int
  userId     String
  duration   Int?
  completed  Boolean  @default(false)
  deviceInfo String?
  ipAddress  String?
  createdAt  DateTime @default(now())
  track      Track    @relation(fields: [trackId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([trackId])
  @@index([createdAt])
}

model CustomItem {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  type        String   // 'benefit', 'feature', 'tool', etc.
  isActive    Boolean  @default(true)
  icon        String?  // Icon name or URL
  color       String?  // Color theme
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String   // Admin user ID
  user        User     @relation(fields: [createdBy], references: [id], onDelete: Cascade)
}
